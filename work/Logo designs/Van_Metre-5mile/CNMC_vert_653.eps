%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: CNMC_vert_653.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Frank Bilotto
%%CreationDate: 1/14/10
%%BoundingBox: 0 0 552 489
%%HiResBoundingBox: 0 0 552 488.1602
%%CropBox: 0 0 552 488.1602
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%AI3_Cropmarks: 36.0000 36.0000 516.0000 452.1601
%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 116 8%%BeginData: 8248 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDF3FF7E2F2F070D075A7EFD59FF842F2F0D2F2F84%FD16FFA95A0D0D072F0D0D072F2FFD56FF842F070D060D070D062F7EFD13%FFA82F060D070D060D070D060D2FFD54FFA82F0D2F0D2F0D2F0D2F0D2F7E%FD12FF7E0D2F0D2F0D2F0D2F0D2F0D2F53FD53FF53070D070D070D070D07%0D070D7EFD05FFA87E53532F532F7E7EA9FFFF070D070D070D070D070D07%0D070DA8FD51FFA90D0D072F0D0D072F0D0D072F0D0DA8FFA85A0D2F0D0D%072F0D0D072F0D2F2F2F0D0D072F0D0D072F0D0D072F0D7EFD51FF530D07%0D060D070D060D070D060D07532F0D070D060D070D060D070D060D070D06%0D070D060D070D060D070D060D2FFD51FF5A0D2F0D2F0D2F0D2F0D2F0D2F%0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F%0D2F0D5AFD51FF2F0D070D070D070D070D070D070D070D070D070D070D07%0D070D070D070D070D070D070D070D070D070D070D070D2FFD51FF5A072F%0D0D072F0D0D072F0D0D072F0D0D072F0D0D072F0D0D072F0D0D072F0D0D%072F0D0D072F0D0D072F0D0D0784FD0BFFA92F2F0D2F53FD40FF2F0D060D%070D060D070D060D070D060D070D060D070D060D070D060D070D060D070D%060D070D060D070D060D070DA8FD09FFA8532F7EA8A97E5A2F7EFD3EFF84%0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F%0D2F0D2F0D2F0D2F0D2F0D2F0D2F53FD0AFF542FFD06FFAF2F85FD3DFFA9%2F070D070D070D070D070D070D070D070D070D070D070D070D070D070D07%0D070D070D070D070D070D070D2FFD0AFF840DFD08FFA82FFD3EFF5A0D07%2F0D0D072F0D0D072F0D0D072F0D0D072F0D0D072F0D0D072F0D0D072F0D%0D072F0D0D072F0D0D0DFD0BFF2FA9FD09FF5A5AFD3EFF2F0D060D070D06%0D070D060D070D060D070D060D070D060D070D060D070D06532F0D060D07%0D060D077E2FFD0AFF2FA8FFFF532FFD05FF592FFD3FFF2F2F0D2F0D2F0D%2F0D2F0D2F0D2F0D7E7E2F0D2F0D2F0D2F0D2F0D2F0DFFFFFFA92F0D2F0D%2F0D2FA8FF5AFD08FFA92FFFFFA90D2FFD05FFA92FFD40FF2F0D070D070D%070D070D070D07A9FFFFA92F070D070D070D070D070DFD04FF7E0D070D07%0D072FA8A984FD07FFA92FFFFFFF7E59FD05FF5A2FFD41FF7E5A5A0D072F%0D0D072F0D5AFD04FF5A2F0D5A7EA9847E2F2F0DFD05FF072F0D0D072F0D%5AFF7EFD08FF2FA9FD09FF5A7EFD41FFA8A884070D060D070D060D0DFD04%FF2F2FFD07FF7E2F53FFFFFF840D060D070D060D07AF7EFD08FF7E2FFD08%FFA907AFFD41FF84FF7E2F0D2F0D2F0D2F0D2FA8FFFF5A2FFD0AFF302F84%5A2F0D2F0D2F0D2F0D2F7EFFA8FD08FF2F5AFD07FF2F7EFD42FFA97EAF07%0D070D070D070D07FD042FFD0CFF2F070D070D070D070D070D072FFF7EFD%08FFA92F2FA9A9FFA87E2F5AFD44FF7EFF2F0D0D072F0D0D072F0D0D07A9%FD04FF5A0D072F7EFFFFFFA80D072F0D0D072F0D0D072F2FFF5AFD09FF5A%A92F5A2F2F2FA9FD45FF53FF590D070D060D070D060D070DFD04FF530D07%0D062FFD04FF2F0D060D070D060D070D0653FF7EFD09FF5AFF2F060D075A%A8FD46FF5AFF2F2F0D2F0D2F0D2F0D2F53FD04FF5A0D2F0D2F0DFD04FFA9%0D2F0D2F0D2F0D2F0D2F2FFF5AFD06FFA95A5AA9A90D2F0D2F0D5AFD46FF%7EA8FF0D0D070D070D070D077EFD04FF530D070D0784FD04FFA90D070D07%0D070D070D077EA97EFD04FFA82F070D2FFF2F0D070D070D075AFD45FF5A%2FFFA90D0D072F0D0D072F7EFD05FF7E7E7EFD07FF0D0D072F0D0D072F0D%0D84A9A8FD04FF2F072F0D5A7E2F0D0D072F0D0D0DFD45FF5A072FFFA807%0D060D070D067EFD0FFF0D070D060D070D060D07FF59FD04FF7E070D060D%5A0D060D070D060D070DFD45FF2F2F0D7EFFA90D2F0D2F0D2F2FFD0FFF0D%2F0D2F0D2F0D2F0D5AFF5AFD04FF532F0D2F2F5A0D2F0D2F0D2F0D2F0DFD%45FF53070D075AFF84070D070D070DA8FD0EFF0D070D070D070D070DA8A9%2FFD04FF53070D2F7E070D070D070D070D072FFD45FF2F2F0D0D075AFFFF%2F2F0D0D075AFD0DFFA9072F0D0D072F0D0D53FF2F5AFD04FF2F2F7E8407%2F0D0D072F0D0D072F5AFD45FFA8060D070D062FA8FF2F0D070D065AFD0C%FF530D060D070D060D07FF7E0D2FFFFFFF595AA8A8070D060D070D060D07%0D2FFD47FF7E0D2F0D2F0D2F7EFFA82F0D2F0D5AFD0BFF2F0D2F0D2F0D2F%0DFFA92F0D7EFFFF5A7EFFA90D2F0D2F0D2F0D2F0D2F2FFD49FFA82F0D07%0D070D2FFFFF5A2FA9FD0CFFA82F070D070D07FFFF2F0753A97E2FFFFF5A%070D070D070D070D072F7EFD4CFFA9A85A7E5A7E5384FFAF7EFD0FFFA8AF%53FFA85AA8FF5A5AA8FFA85A84A85A7E2F5A597E7EA9FD55FF845A7EFFA8%84A8FD0CFFA97EFF842F535A7EFFFFA953A8FF7E7EFD5FFFA953A9FFFFA8%A9A8FD07FF7EA9FD08FF7E7EA8FD66FFA87E59A9FFFFFFA9A8AFA8FFFFFF%A87E7E847E7E537E7EFD5EFFA9FD0DFFA87E597E7E847E845A5A53A9FD5E%FFA9597E597EA8FF5A0DA8FD08FFA8FFFF7E2F2FFD06FF84077EFD18FF53%FD45FF7E0D5A7E300D2F532F0DA9FD08FF0D7E7E2F0D5AFD05FF850D2F5A%FD17FF7E2F53FD43FF5A075AFFFFA92F07A9070D7EFD08FF0D59FF2F0D59%FD06FF53077EFD17FF7E0753FD42FFA9072FFD04FF7E0D842F0DFD09FF2F%A9FF7E077EFD06FF2F2F5AFD18FF5A2FFD42FF2F0D2FFD05FF2FA8060DFF%A9597EA8FD04FFA9A8FF590D53FFFFFF7EA8A82F067EFFFFA8AFFD05FFA9%537EA8FFFFFF7EFFA8845AA9FFFF0DA884845AA9FD3EFF2F0D7EFD06FF84%2F0D7E0D2F0D2F7EFFFF7E0D7EFF7E0D7EFFFF2F5AA8840D2F5AFF5A2F7E%7E2F2FFF5A2FFFFF2F7EFF2F2F7E2F0D2F0D7E7E7E2F305A300DA9FD3CFF%A9070D59FD06FFA8070D2F7E7E53072FFF7E070D59FF530D59FF2F2FA9FF%FF53077E842F070D0D0D075A07A9FFFF7E0D530D072FA8FF530D07AF2F0D%59FFA82FA8FD3CFF842F0D7EFD06FFA80D0784FFFF7E2F0DFFFF360D7EFF%5A0D7E7E2F5AFFFFFF7E0D5AFF2F0D0DFF5A7E0D2FFFFFFF840D84072F7E%FFFFFF0D0DA82F0DA9FFFF7EFD3DFFA8060D59FD06FFA8070DA8FFFFA806%0DFFFF2F0D59FF2F0D595A0684FFFFFF84077EFF5A072FFFFF7E0D2FFFFF%FF530D590D06A8FFFFFF0D07A8070D077EFD3FFF842F0D7EFD06FFA82F0D%FFFFFF842F0DFFFF5A0D7EFF5A0D7E2F2FA9FFFFFF7E2F5AFF5A2F59FFFF%7E0D2F2F7E2F5A2F840D2FA8FFFFFF0D2F84A90D2F0D5AA8FD3EFF070D53%FD05FFA8A9070DFFFFFFA8070DFFFF2F0D59FF2F0D590D07AFFFFFFF8407%7EFF7E077EFFFF590D07FD06FF0D07A9FFFFFF0D07A8FFA92F0D072FA8FD%3DFF2F075AFD05FF5A7E2F0DFFFFFFA80D07FFFF5A0784FF5A077E0D0D84%FFFFFF7E2F5AFF2F2F5AFFFF7E0D2FFD06FF0D0D84FFFFFF072FA8FFFFFF%7E0D075AFD3DFF5A0D06FD04FFAF077E060D7EFFFF84070DFFFF2F0D7EFF%590D5353077EFFFFFF7E067EFF2F065AFFFF7E0D07A9FD05FF0D07A8FFFF%A80D06A87EFFFFFF5A0D2FFD3EFF2F2F7EFFFFFF7E2F7E2F0DA9FFFF5A2F%0DA9FF5A0DA9FF7E0D5A7E2F2FFFFFFF5A2F5AA92F2F2FFFFFFF0D2F5AFF%FFFF7EA90D2F84FFFFA90D2FA85A7EFFFFA90D5AFD3EFFA9072FA8FFA82F%075A070D84FFFF7E070D7EFF0D0D53FF0D0D2FFF0D0D5AFFA92F072F2F2F%0753FFFFFF7E070D59A9592F7E0D077EFFFF840D07A82F2FA8FF7E0D7EFD%3FFFA9FD042F075A2F0D2F7EFFFF2F2F2F5A53362F5A2F2F0D5A7EA9535A%075A5A0D2F360D0D07A9FFFFFF7E0D0D072F845A2F2F53FFFF5A2F0D2F36%0D2F2F2F5AFD42FFA8A87EFD1BFF7EFD0AFFAF7EA8FD52FFA9A8FFA8FD06%FFAFFD0AFFA82FFFFF7EFFFFA97EFD04FFA92FFF84FD06FF3084FFFFA95A%FD07FFAFFD46FF2F5AFF53FD04FF2FFFA8FD0AFFA92FFFFF2F59AF0DA9FD%04FF7E5AA8FFA8AFFD04FF2FFFFF5A535AA8FD06FF5AFD46FF5A2FA97E7E%A85A5A5A7E7E5AA95A5A532FA87E845A7E7EFFFF0D7E532F845A7EA87E5A%845AA85A59FF7E5A845AFFA82FFFA97E2F5A535A2FA92F7EA87E537EA8FD%3FFF847E2F2F7E53FF535A84535AA9A85A2F7E2F845AFF535AA8FF595A2F%5A2F59A85959FF2F7E2F5AA8FF2FFF2F7E7EFF2FA8FFFF590D2F0D595353%8459FF532F5AFD40FF53FF5A302FFF537E2FA90D7EFF845A2FA85A53FF53%7E2FA9FF5A5A2F7E7E2F8453FF7E5A7E5A0DA92F7E7E5A5384FF5AA8FF84%7E7E845A845A5A7E5A7EA92FFD40FFA82FA8A95A537E2F845AFF5A84A82F%7E59A8535A59537E2FA97E2F7E7E2F592F2F84595A7E53A85A597E595A84%2FA8FF7E532FA82FA92FAF53A92FAF0D2F5984FD53FFA9FFFFFFA9FD07FF%A8FFFFFFA9FD07FFA9FD10FFA9FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFC%FFFDFCFFFD05FF84A8FD7DFFA92F7EFD7EFFA9A8FDFCFFFDFCFFFDFCFFFD%FCFFFDFCFFFDFCFFFDCFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (PANTONE 648 C)
%%CMYKCustomColor: 1 0.6200 0 0.5200 (PANTONE 648 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-01-14T12:37:55-05:00</xap:CreateDate>
         <xap:ModifyDate>2010-01-14T12:37:55-05:00</xap:ModifyDate>
         <xap:MetadataDate>2010-01-14T12:37:55-05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>228</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADkAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qkfmvzt5Z8q2guNav&#xA;Vt+YJhgHxzSU/kjX4j8+nicuw4J5DUQ1Zc8MYuRp5JrH/OUEYkdNH0MvGD8E93NxJHvFGrU/4PNl&#xA;Dsn+dL5Osn2uP4YoGz/5yh1VZR9d0KCWLuIZnjYfSyyDJy7JHSTAdrnrH7XoflH88/I/mGRLaSdt&#xA;KvnoFgveKozHskoJQ/7KhPhmFm7PyQ35jyc7Dr8eTa6Pm9CzBc12KuxV2KuxV2KuxV2KtSSJGjSS&#xA;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&#xA;MzzCBHNXWFWNE5dyBU+OSzaqeQUUYtNCHJOtF0LStEsvqWlwfV7YyPMU5O5MkrFnYs5ZiST3OVZM&#xA;kpmy2QgIigj8gzdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdiqWeZr68sdEubqzoJ4+A9RlLrGjOqyTMo3YRIS5Ht&#xA;lmKIMgCxmSBsw/8AK3zP5o1ea6i1qYXIWMSghIgYeRHpqzwBUJkViePVeO9K0GTq8UIgcLRp5ylz&#xA;eh5hOS7FXYq7FXYq7FXYq7FXYq7FXYq7FX//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:A35B6DC59702DF118CCEE2CE4623D1DC</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:A45B6DC59702DF118CCEE2CE4623D1DC</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:F5F64BF6283911DA8AB99B2C8730CA95</stRef:instanceID>
            <stRef:documentID>uuid:9639A89BFB5E11D9B529ECD5FE098FEC</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <photoshop:History/>
         <photoshop:ColorMode>0</photoshop:ColorMode>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>5.000000</stDim:w>
            <stDim:h>5.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 648 C</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 648 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>62.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>52.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 653 PC</xapG:swatchName>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>96.000000</xapG:cyan>
                           <xapG:magenta>58.999996</xapG:magenta>
                           <xapG:yellow>4.000000</xapG:yellow>
                           <xapG:black>17.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -488.16 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 488.16 li
552 488.16 li
552 0 li
cp
clp
[1 0 0 1 0 0 ]ct
304.195 433.705 mo
307.314 432.795 308.855 434.375 309.234 435.865 cv
310.766 441.875 301.885 442.735 301.555 437.545 cv
301.404 435.235 302.404 434.225 304.195 433.705 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.96 0.59 0.04 0.17 cmyk
f
304.675 434.425 mo
309.545 433.115 309.404 440.745 304.915 440.186 cv
301.955 439.815 301.686 435.235 304.675 434.425 cv
cp
0 0 0 0 cmyk
f
214.447 193.999 mo
222.447 197.263 231.611 187.741 229.532 179.599 cv
228.683 176.263 225.382 174.099 221.133 174.627 cv
216.083 175.256 211.162 179.584 210.333 185.256 cv
209.79 188.941 211.062 192.613 214.447 193.999 cv
cp
307.702 251.769 mo
302.623 251.633 298.152 251.439 293.131 250.739 cv
289.523 250.24 282.717 249.312 282.502 245.769 cv
282.402 244.154 284.109 241.933 284.902 240.283 cv
287.573 234.711 289.273 228.248 288.674 219.883 cv
287.81 207.819 281.952 197.691 274.617 191.256 cv
269.417 186.699 261.332 182.984 253.018 183.199 cv
243.396 183.449 236.311 187.841 230.904 194.17 cv
225.875 200.063 222.068 208.541 222.675 218.341 cv
223.275 227.976 228.925 237.34 235.361 241.483 cv
236.575 242.261 238.239 242.226 239.132 244.054 cv
236.361 247.168 231.089 247.782 226.79 249.368 cv
237.832 255.168 250.675 261.032 266.56 262.396 cv
283.366 263.84 297.659 259.418 307.702 251.769 cv
cp
287.646 191.256 mo
293.181 191.684 297.023 188.234 296.217 182.17 cv
295.438 176.292 289.424 171.521 283.874 171.713 cv
279.553 171.863 276.803 174.485 276.331 177.885 cv
275.324 185.142 281.859 190.813 287.646 191.256 cv
cp
393.757 201.027 mo
392.557 200.456 391.278 199.962 389.985 199.484 cv
388.035 204.048 386.093 208.62 383.643 212.684 cv
383.929 214.441 383.814 216.162 383.471 217.655 cv
381.514 226.162 373.993 233.119 367.186 236.683 cv
366.086 237.254 364.7 237.461 363.586 238.054 cv
362.665 238.547 361.936 239.676 361.015 240.454 cv
347.544 251.833 329.779 260.097 306.502 260.511 cv
318.88 253.282 329.68 242.361 335.986 226.912 cv
342.551 210.819 341.608 187.263 332.216 175.999 cv
330.572 174.027 327.358 170.742 324.673 169.999 cv
324.423 170.092 324.251 170.263 324.158 170.513 cv
324.009 175.313 327.58 176.806 329.473 179.427 cv
333.822 185.435 336.63 194.755 336.158 204.798 cv
335.508 218.626 331.687 228.726 325.701 237.54 cv
320.03 245.89 312.352 252.825 302.73 257.769 cv
293.267 262.632 281.138 266.196 266.731 264.797 cv
242.046 262.396 222.454 250.726 206.39 238.912 cv
198.119 232.826 190.44 226.397 183.591 218.512 cv
176.77 210.662 166.934 198.206 170.905 183.713 cv
169.491 183.97 167.734 183.742 166.62 183.884 cv
164.034 192.434 166.763 200.112 170.048 206.341 cv
173.298 212.498 177.534 217.991 181.705 222.626 cv
190.798 232.726 200.926 240.918 212.047 248.168 cv
223.59 255.696 235.804 261.918 250.104 265.996 cv
263.082 269.696 279.574 270.082 292.445 266.339 cv
294.195 265.832 295.974 264.782 297.759 264.625 cv
299.174 264.504 300.674 264.903 302.045 264.968 cv
313.73 265.496 324.065 263.711 332.729 260.854 cv
362.758 250.947 381.964 229.512 393.757 201.027 cv
cp
424.956 185.599 mo
429.698 175.449 426.256 163.756 420.67 157.657 cv
416.456 153.049 409.456 149.143 400.1 149.942 cv
393.085 150.542 388.307 153.6 384.671 157.313 cv
381.179 160.878 377.964 165.878 377.472 172.742 cv
376.843 181.513 379.936 187.477 384.157 192.113 cv
388.063 196.405 394.436 200.184 402.328 200.169 cv
412.713 200.148 421.256 193.505 424.956 185.599 cv
cp
422.728 156.799 mo
427.027 161.828 430.12 168.349 429.584 176.513 cv
429.07 184.392 425.592 190.777 420.842 195.198 cv
416.313 199.413 409.199 202.934 400.613 202.398 cv
398.906 202.291 396.464 200.941 395.643 202.741 cv
397.635 203.262 399.464 202.577 401.299 202.57 cv
413.999 202.541 422.806 211.719 422.556 224.169 cv
422.284 237.711 412.206 246.004 400.956 249.54 cv
390.656 252.775 375.692 253.254 364.443 250.911 cv
362.95 250.597 360.979 249.633 359.814 249.711 cv
358.515 249.797 355.236 252.383 353.472 253.482 cv
341.187 261.133 326.13 266.933 306.502 267.196 cv
303.58 267.239 300.416 266.496 297.759 266.854 cv
296.066 267.082 294.345 268.254 292.616 268.739 cv
279.467 272.446 264.139 271.996 250.96 268.396 cv
236.282 264.382 224.347 258.554 212.733 251.254 cv
198.655 253.104 184.684 250.689 177.419 245.254 cv
171.055 240.49 168.098 232.754 169.877 223.141 cv
170.105 221.891 170.57 220.391 170.905 218.855 cv
171.191 217.548 171.877 215.598 171.763 214.398 cv
171.627 213.005 169.962 211.405 169.02 209.77 cv
165.327 203.37 161.384 192.884 164.391 182.856 cv
157.877 179.584 151.777 175.149 147.42 169.142 cv
143.178 163.299 139.721 155.756 139.363 146.686 cv
138.692 129.557 149.356 115.236 166.105 113.086 cv
176.098 111.808 184.969 115.622 191.133 119.943 cv
197.676 124.529 202.469 130.307 205.705 137.771 cv
213.783 132.786 225.047 128.329 237.932 127.143 cv
251.582 125.886 264.281 128.464 274.445 132.8 cv
278.517 119.265 287.573 109.579 303.416 108.287 cv
320.78 106.865 332.844 117.479 337.187 129.543 cv
342.572 144.5 335.266 160.435 324.158 167.085 cv
329.423 168.492 333.458 173.799 336.158 178.228 cv
342.15 188.048 344.044 202.491 341.301 216.284 cv
340.808 218.776 339.736 221.205 339.415 223.655 cv
338.529 230.426 340.279 241.054 337.016 245.939 cv
334.087 250.325 327.287 249.396 323.13 250.911 cv
321.744 251.418 320.323 253.025 319.016 254.168 cv
317.737 255.29 316.53 256.461 315.244 257.597 cv
331.887 255.726 344.286 249.611 355.015 241.826 cv
355.736 238.826 358.101 238.04 358.957 235.654 cv
359.886 233.069 359.536 230.283 359.814 227.769 cv
360.672 220.09 364.943 213.162 371.643 210.626 cv
373.058 210.091 374.515 209.833 376.614 209.941 cv
377.6 209.991 378.686 210.577 379.871 210.455 cv
380.843 210.355 382.785 208.912 383.471 208.055 cv
385.214 205.876 386.343 200.919 387.757 198.456 cv
381.714 193.57 376.821 188.284 375.414 179.427 cv
373.929 170.099 377.55 161.335 382.614 156.114 cv
387.864 150.7 395.421 146.75 405.242 147.542 cv
412.971 148.171 418.656 152.049 422.728 156.799 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
404.214 196.056 mo
415.513 194.891 423.834 185.034 422.898 172.913 cv
422.47 167.356 419.506 162.506 416.898 159.885 cv
413.185 156.149 407.578 153.292 400.613 153.885 cv
393.307 154.514 388.028 158.1 384.843 162.628 cv
375.107 176.456 385.035 198.034 404.214 196.056 cv
cp
421.698 160.914 mo
423.784 163.835 426.377 169.82 425.984 176.342 cv
425.355 186.691 418.691 193.963 411.07 197.084 cv
402.299 200.669 392.021 198.462 385.186 191.256 cv
379.314 185.07 376.586 174.863 380.729 165.371 cv
382.514 161.285 384.907 158.349 388.785 155.6 cv
392.135 153.221 395.936 151.157 402.328 151.143 cv
411.099 151.121 417.941 155.649 421.698 160.914 cv
cp
0 0 0 0 cmyk
f
406.956 306.452 mo
412.784 311.924 425.685 313.695 425.642 326.338 cv
425.613 333.895 420.799 338.837 414.499 340.565 cv
410.756 341.595 404.999 341.837 400.956 340.565 cv
399.742 340.181 399.421 340.08 398.214 338.509 cv
397.528 340.716 394.085 340.002 391.014 339.88 cv
387.285 339.73 382.8 340.681 379.7 339.194 cv
379.899 336.666 382.55 337.659 383.471 336.109 cv
384.856 333.773 383.985 323.224 383.985 319.652 cv
383.985 313.331 384.378 308.253 383.985 304.053 cv
383.485 298.674 379.121 294.86 372.672 297.195 cv
365.979 299.624 367.186 310.331 367.186 319.652 cv
367.186 323.302 367.179 325.752 367.186 328.909 cv
367.186 331.088 366.558 335.944 368.215 337.138 cv
369.086 337.766 371.707 337.052 371.814 338.681 cv
371.943 340.623 364.758 339.88 362.729 339.88 cv
359.95 339.88 354.115 340.723 353.986 338.681 cv
353.865 336.809 356.636 337.287 357.586 336.28 cv
358.715 335.08 358.579 330.416 358.614 328.224 cv
358.722 321.245 358.672 309.273 358.443 300.624 cv
357.808 299.546 355.771 299.867 354.672 299.253 cv
355.229 296.796 358.129 296.203 359.986 295.139 cv
361.965 294.003 363.686 292.396 365.814 291.71 cv
366.636 293.596 365.743 297.238 366.5 298.738 cv
369.55 297.374 370.75 295.132 373.871 293.596 cv
378.557 291.296 385.471 291.481 388.957 294.967 cv
393.249 299.26 392.542 307.124 392.557 313.824 cv
392.563 316.823 392.557 320.353 392.557 324.623 cv
392.557 327.816 391.764 333.787 393.071 335.938 cv
393.936 337.358 396.178 337.23 397.871 337.994 cv
398.228 336.53 396.55 326.502 398.557 325.48 cv
401.478 323.995 403.492 332.787 404.899 335.08 cv
408.327 340.659 417.342 339.052 418.271 332.338 cv
419.521 323.259 412.014 319.952 406.785 316.909 cv
402.735 314.553 397.949 312.174 397.699 305.767 cv
397.292 295.367 407.249 291.403 417.241 292.225 cv
419.12 292.382 421.892 292.51 422.898 293.768 cv
423.642 294.703 424.148 303.817 422.385 304.396 cv
420.313 305.074 419.749 301.753 419.127 300.281 cv
417.363 296.11 413.849 292.839 408.499 295.139 cv
405.835 296.281 403.471 299.346 404.899 303.538 cv
405.292 304.688 406.021 305.574 406.956 306.452 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
425.984 176.342 mo
426.377 169.82 423.784 163.835 421.698 160.914 cv
417.941 155.649 411.099 151.121 402.328 151.143 cv
395.936 151.157 392.135 153.221 388.785 155.6 cv
384.907 158.349 382.514 161.285 380.729 165.371 cv
376.586 174.863 379.314 185.07 385.186 191.256 cv
392.021 198.462 402.299 200.669 411.07 197.084 cv
418.691 193.963 425.355 186.691 425.984 176.342 cv
cp
420.67 157.657 mo
426.256 163.756 429.698 175.449 424.956 185.599 cv
421.256 193.505 412.713 200.148 402.328 200.169 cv
394.436 200.184 388.063 196.405 384.157 192.113 cv
379.936 187.477 376.843 181.513 377.472 172.742 cv
377.964 165.878 381.179 160.878 384.671 157.313 cv
388.307 153.6 393.085 150.542 400.1 149.942 cv
409.456 149.143 416.456 153.049 420.67 157.657 cv
cp
f
395.471 178.57 mo
402.285 180.006 402.978 168.949 396.156 169.828 cv
390.985 170.492 391.25 177.677 395.471 178.57 cv
cp
422.898 172.913 mo
423.834 185.034 415.513 194.891 404.214 196.056 cv
385.035 198.034 375.107 176.456 384.843 162.628 cv
388.028 158.1 393.307 154.514 400.613 153.885 cv
407.578 153.292 413.185 156.149 416.898 159.885 cv
419.506 162.506 422.47 167.356 422.898 172.913 cv
cp
0 0 0 0 cmyk
f
418.784 354.108 mo
420.441 355.244 419.713 359.594 417.241 359.251 cv
416.456 358.529 417.263 357.33 417.413 356.509 cv
415.949 356.466 415.456 358.216 414.842 359.251 cv
412.899 362.522 411.256 366.88 409.87 370.736 cv
408.984 370.736 408.771 370.958 408.156 370.565 cv
408.984 365.508 411.035 361.673 411.585 356.337 cv
409.557 356.602 409.484 359.701 407.984 359.937 cv
408.792 357.708 410.042 354.451 413.471 354.28 cv
414.592 356.165 413.128 358.937 412.784 360.966 cv
414.628 358.522 415.234 354.844 418.784 354.108 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
398.899 362.851 mo
402.985 362.322 406.714 359.751 405.413 354.966 cv
401.07 354.744 400.028 359.287 398.899 362.851 cv
cp
404.385 353.937 mo
408.899 353.673 408.292 359.701 405.928 361.479 cv
404.171 362.801 401.014 363.029 398.728 363.88 cv
397.928 366.13 398.371 369.022 400.1 369.365 cv
403.264 369.994 404.399 365.951 406.271 364.736 cv
405.62 367.287 402.464 372.743 398.042 370.908 cv
396.456 370.251 395.778 367.715 395.985 365.079 cv
396.335 360.537 400.257 354.18 404.385 353.937 cv
cp
f
405.413 354.966 mo
406.714 359.751 402.985 362.322 398.899 362.851 cv
400.028 359.287 401.07 354.744 405.413 354.966 cv
cp
0 0 0 0 cmyk
f
397.699 274.396 mo
402.913 273.604 404.663 279.854 404.214 284.511 cv
403.913 287.604 402.32 290.396 400.613 292.91 cv
398.978 295.31 397.406 298.61 394.271 298.225 cv
394.156 295.824 396.171 294.603 397.528 292.738 cv
398.635 291.217 400.649 288.738 400.1 286.225 cv
399.57 283.817 395.728 284.067 394.442 282.282 cv
392.321 279.339 394.985 274.811 397.699 274.396 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
397.699 354.623 mo
397.728 355.852 396.071 355.395 394.957 355.479 cv
393.3 359.537 391.25 364.115 390.671 368.68 cv
392.628 368.572 393.1 365.516 394.785 364.565 cv
394.228 367.158 392.235 370.608 388.614 370.908 cv
387.171 369.286 389.264 364.615 389.985 362.508 cv
390.864 359.937 391.749 357.608 392.385 355.651 cv
392.014 355.272 390.136 355.509 390.5 354.966 cv
390.393 353.944 392.035 354.673 392.729 354.451 cv
394.071 352.815 393.264 348.137 396.671 349.137 cv
396.507 351.145 395.521 352.33 395.3 354.28 cv
395.742 354.751 397.249 354.158 397.699 354.623 cv
cp
f
396.156 169.828 mo
402.978 168.949 402.285 180.006 395.471 178.57 cv
391.25 177.677 390.985 170.492 396.156 169.828 cv
cp
f
389.985 199.484 mo
391.278 199.962 392.557 200.456 393.757 201.027 cv
381.964 229.512 362.758 250.947 332.729 260.854 cv
324.065 263.711 313.73 265.496 302.045 264.968 cv
300.674 264.903 299.174 264.504 297.759 264.625 cv
295.974 264.782 294.195 265.832 292.445 266.339 cv
279.574 270.082 263.082 269.696 250.104 265.996 cv
235.804 261.918 223.59 255.696 212.047 248.168 cv
200.926 240.918 190.798 232.726 181.705 222.626 cv
177.534 217.991 173.298 212.498 170.048 206.341 cv
166.763 200.112 164.034 192.434 166.62 183.884 cv
167.734 183.742 169.491 183.97 170.905 183.713 cv
166.934 198.206 176.77 210.662 183.591 218.512 cv
190.44 226.397 198.119 232.826 206.39 238.912 cv
222.454 250.726 242.046 262.396 266.731 264.797 cv
281.138 266.196 293.267 262.632 302.73 257.769 cv
312.352 252.825 320.03 245.89 325.701 237.54 cv
331.687 228.726 335.508 218.626 336.158 204.798 cv
336.63 194.755 333.822 185.435 329.473 179.427 cv
327.58 176.806 324.009 175.313 324.158 170.513 cv
324.251 170.263 324.423 170.092 324.673 169.999 cv
327.358 170.742 330.572 174.027 332.216 175.999 cv
341.608 187.263 342.551 210.819 335.986 226.912 cv
329.68 242.361 318.88 253.282 306.502 260.511 cv
329.779 260.097 347.544 251.833 361.015 240.454 cv
361.936 239.676 362.665 238.547 363.586 238.054 cv
364.7 237.461 366.086 237.254 367.186 236.683 cv
373.993 233.119 381.514 226.162 383.471 217.655 cv
383.814 216.162 383.929 214.441 383.643 212.684 cv
386.093 208.62 388.035 204.048 389.985 199.484 cv
cp
0 0 0 0 cmyk
f
363.243 362.851 mo
367.193 362.365 371.472 359.065 369.414 354.794 cv
365.164 355.287 364.207 359.072 363.243 362.851 cv
cp
386.899 354.451 mo
387.813 360.029 383.571 363.322 383.128 368.68 cv
385.464 368.829 385.657 365.387 387.585 364.565 cv
386.399 367.501 384.893 371.001 381.071 370.736 cv
380.242 366.494 382.757 362.694 384.157 359.251 cv
384.585 358.201 385.449 356.658 384.5 355.651 cv
381.25 356.187 379.564 359.315 377.985 361.994 cv
376.364 364.736 374.893 367.829 373.7 370.736 cv
373.036 370.772 372.436 370.744 371.985 370.565 cv
372.636 368.087 373.4 365.63 374.214 363.194 cv
374.979 360.915 376.586 358.529 375.929 355.994 cv
374.278 356.744 373.379 358.244 372.5 359.766 cv
371.371 359.237 371.058 360.822 369.757 361.651 cv
367.907 362.822 365.672 363.087 363.243 363.537 cv
361.979 365.215 362.536 368.615 363.929 369.193 cv
367.007 370.473 368.686 366.058 370.443 364.736 cv
370.714 367.772 363.914 373.937 361.015 369.708 cv
358.472 366.001 361.857 358.102 365.129 355.479 cv
367.493 353.58 373.371 352.852 371.985 358.565 cv
373.65 357.444 374.914 353.658 378.157 354.108 cv
379.307 356.08 377.929 358.694 377.472 360.622 cv
379.764 358.594 381.785 353.102 386.899 354.451 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
369.414 354.794 mo
371.472 359.065 367.193 362.365 363.243 362.851 cv
364.207 359.072 365.164 355.287 369.414 354.794 cv
cp
0 0 0 0 cmyk
f
361.357 258.625 mo
364.564 259.025 364.664 253.575 361.186 254.511 cv
359.051 255.09 359.243 258.361 361.357 258.625 cv
cp
364.443 255.54 mo
365.536 259.832 359.193 260.446 358.957 256.739 cv
358.851 255.09 359.564 254.368 360.843 253.997 cv
363.071 253.347 364.172 254.476 364.443 255.54 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
363.071 347.938 mo
363.336 348.944 362.7 350.18 362.386 351.365 cv
362.101 352.451 362.186 354.173 361.015 354.451 cv
359.879 353.479 361.65 350.688 360.843 348.966 cv
353.879 349.237 348.865 357.451 349.187 365.079 cv
349.329 368.486 351.751 371.986 355.015 369.193 cv
355.814 368.508 356.594 367.465 357.072 366.451 cv
357.551 365.43 357.472 363.772 358.786 363.365 cv
359.465 365.372 357.786 367.958 357.243 369.88 cv
354.472 371.608 350.179 371.665 348.158 369.365 cv
346.387 367.351 346.272 364.479 346.615 361.651 cv
347.515 354.229 354.907 346.744 363.071 347.938 cv
cp
f
361.186 255.883 mo
361.193 256.396 362.586 256.411 362.386 255.711 cv
362.258 255.312 361.051 255.111 361.186 255.883 cv
cp
363.071 255.54 mo
363.25 256.347 362.679 256.404 362.386 256.739 cv
362.407 257.347 363.021 257.361 362.9 258.111 cv
362.136 257.961 362.036 257.146 361.529 256.739 cv
361.15 256.989 361.293 257.761 361.015 258.111 cv
360.293 257.633 360.843 255.883 360.672 254.854 cv
361.729 254.825 362.821 254.761 363.071 255.54 cv
cp
f
362.386 255.711 mo
362.586 256.411 361.193 256.396 361.186 255.883 cv
361.051 255.111 362.258 255.312 362.386 255.711 cv
cp
0 0 0 0 cmyk
f
362.386 256.739 mo
362.679 256.404 363.25 256.347 363.071 255.54 cv
362.821 254.761 361.729 254.825 360.672 254.854 cv
360.843 255.883 360.293 257.633 361.015 258.111 cv
361.293 257.761 361.15 256.989 361.529 256.739 cv
362.036 257.146 362.136 257.961 362.9 258.111 cv
363.021 257.361 362.407 257.347 362.386 256.739 cv
cp
361.186 254.511 mo
364.664 253.575 364.564 259.025 361.357 258.625 cv
359.243 258.361 359.051 255.09 361.186 254.511 cv
cp
f
345.93 309.367 mo
347.579 307.617 347.4 302.917 346.615 299.938 cv
345.529 295.796 342.443 292.574 338.044 294.796 cv
333.865 296.902 331.309 304.396 331.358 310.053 cv
332.915 311.688 335.829 311.152 338.558 311.081 cv
341.223 311.01 344.529 310.846 345.93 309.367 cv
cp
338.901 291.882 mo
351.408 290.738 356.344 300.902 354.672 312.967 cv
345.629 314.616 339.258 312.603 331.529 313.995 cv
329.858 320.445 331.901 328.502 334.958 332.338 cv
338.837 337.202 347.351 337.102 351.243 332.166 cv
352.015 331.188 352.779 327.638 354.501 328.052 cv
356.187 328.459 355.115 331.131 354.329 332.681 cv
351.7 337.866 345.743 342.18 337.701 341.252 cv
321.959 339.438 317.444 315.681 325.358 301.652 cv
328.08 296.831 332.365 292.481 338.901 291.882 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
346.615 299.938 mo
347.4 302.917 347.579 307.617 345.93 309.367 cv
344.529 310.846 341.223 311.01 338.558 311.081 cv
335.829 311.152 332.915 311.688 331.358 310.053 cv
331.309 304.396 333.865 296.902 338.044 294.796 cv
342.443 292.574 345.529 295.796 346.615 299.938 cv
cp
0 0 0 0 cmyk
f
341.13 345.194 mo
341.279 345.272 341.437 345.345 341.473 345.537 cv
339.687 353.408 336.822 360.201 335.301 368.337 cv
337.315 368.337 337.394 364.951 339.244 364.223 cv
338.165 367.201 336.994 370.087 333.758 370.908 cv
332.822 370.422 332.858 369.38 332.901 368.337 cv
333.022 365.13 334.665 361.615 335.644 358.223 cv
336.658 354.716 337.387 351.251 338.387 348.108 cv
338.287 347.294 337.158 347.509 336.673 347.08 cv
337.815 346.108 340.193 346.373 341.13 345.194 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
325.873 363.194 mo
327.322 361.001 329.487 358.43 329.13 355.309 cv
328.43 354.645 327.572 354.723 326.901 354.966 cv
322.994 356.373 318.709 364.687 319.873 368.68 cv
322.895 368.329 324.479 365.309 325.873 363.194 cv
cp
329.815 354.623 mo
330.144 353.744 331.187 353.694 332.216 353.937 cv
331.223 359.001 328.779 363.522 328.102 368.337 cv
329.987 367.865 330.216 364.865 331.701 364.565 cv
330.551 367.529 329.137 370.229 325.701 370.908 cv
324.666 368.38 326.479 365.908 326.901 363.708 cv
325.401 364.351 322.13 371.829 318.501 370.908 cv
316.908 370.501 316.766 367.779 317.13 365.594 cv
315.98 367.851 312.438 373.008 308.73 370.394 cv
307.181 369.301 306.623 366.837 306.845 364.394 cv
307.33 359.151 312.194 352.565 316.787 353.766 cv
318.102 354.108 319.044 356.08 317.645 357.537 cv
315.466 357.944 315.68 355.958 315.073 354.794 cv
310.188 355.973 308.123 363.658 310.273 368.68 cv
313.987 370.394 315.63 366.208 316.959 363.88 cv
317.33 363.908 317.33 364.309 317.302 364.736 cv
318.73 361.165 321.809 355.559 325.873 354.28 cv
327.165 353.873 328.687 353.93 329.815 354.623 cv
cp
f
329.13 355.309 mo
329.487 358.43 327.322 361.001 325.873 363.194 cv
324.479 365.309 322.895 368.329 319.873 368.68 cv
318.709 364.687 322.994 356.373 326.901 354.966 cv
327.572 354.723 328.43 354.645 329.13 355.309 cv
cp
0 0 0 0 cmyk
f
281.988 314.338 mo
281.988 305.631 282.788 294.303 274.445 295.139 cv
273.045 295.281 272.045 295.581 271.36 295.996 cv
266.125 299.174 264.924 308.195 265.017 316.738 cv
265.088 323.603 266.367 333.866 273.246 335.423 cv
283.902 337.838 281.988 323.48 281.988 314.338 cv
cp
323.13 293.768 mo
325.166 295.803 325.416 300.874 323.815 303.195 cv
322.723 304.774 319.287 305.781 317.302 304.224 cv
315.287 302.646 316.58 296.389 312.33 299.596 cv
307.302 303.389 308.259 316.23 308.216 323.938 cv
308.194 327.859 307.438 335.88 309.416 337.138 cv
310.337 337.723 312.28 337.216 312.845 338.166 cv
313.201 340.302 310.688 339.88 309.244 339.88 cv
304.444 339.88 300.33 339.98 295.359 339.537 cv
294.845 338.944 294.802 338.173 295.188 337.48 cv
293.424 338.587 292.302 339.073 290.217 340.052 cv
288.853 340.694 286.353 342.295 284.56 341.595 cv
282.624 340.837 283.616 337.059 282.159 336.28 cv
280.031 335.151 276.831 339.295 275.474 340.052 cv
271.51 342.266 265.903 340.938 262.617 337.994 cv
249.832 326.538 254.325 293.253 272.56 292.225 cv
276.788 291.988 278.503 293.289 282.159 294.967 cv
282.017 289.796 282.273 284.225 281.646 279.539 cv
281.031 278.382 278.617 279.024 277.874 277.996 cv
279.045 275.847 281.945 275.425 284.045 274.225 cv
286.167 273.018 288.066 271.468 290.045 270.796 cv
290.959 271.689 290.56 273.347 290.56 274.739 cv
290.56 291.146 290.388 302.16 290.388 320.166 cv
290.388 322.78 290.459 325.845 290.388 328.224 cv
290.331 330.123 289.924 334.588 291.931 334.737 cv
294.623 334.944 294.238 329.881 296.56 330.109 cv
298.58 332.037 296.688 336.188 295.359 337.48 cv
295.859 337.052 297.959 337.059 298.788 336.109 cv
300.08 334.63 299.645 330.552 299.645 327.366 cv
299.645 320.146 299.816 316.945 299.816 310.053 cv
299.816 307.103 300.395 301.531 299.302 300.281 cv
298.552 299.424 296.109 299.745 295.702 299.081 cv
296.402 296.674 299.316 296.195 301.188 295.139 cv
303.173 294.018 304.78 292.231 307.016 291.71 cv
307.873 293.938 306.944 297.953 307.53 300.453 cv
309.638 299.96 310.309 297.688 311.473 296.339 cv
313.587 293.896 319.302 289.938 323.13 293.768 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
307.359 347.938 mo
307.752 349.352 307.073 351.658 305.645 351.365 cv
303.688 350.966 305.116 346.366 307.359 347.938 cv
cp
/0 
<<
/Name (PANTONE 648 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 0.62 0 0.52 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
305.131 353.937 mo
306.188 356.373 304.83 358.923 304.102 361.137 cv
303.345 363.437 302.194 365.622 302.045 368.165 cv
304.151 367.815 303.98 365.187 305.645 364.394 cv
304.737 367.494 303.045 370.701 299.474 370.565 cv
299.23 364.943 302.345 361.208 303.245 356.165 cv
301.424 356.072 301.23 359.059 299.645 359.766 cv
300.302 357.33 301.895 354.365 305.131 353.937 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
291.416 363.194 mo
293.066 360.779 295.345 358.251 294.674 355.137 cv
293.217 353.873 290.717 355.53 289.702 356.509 cv
288.631 357.544 287.146 360.008 286.273 361.994 cv
285.76 363.18 283.853 367.908 285.588 368.851 cv
287.616 369.958 290.823 364.059 291.416 363.194 cv
cp
296.388 347.08 mo
297.517 346.037 299.73 346.08 301.017 345.194 cv
299.066 353.187 295.502 360.479 293.816 368.165 cv
295.487 368.215 295.902 364.673 297.416 364.565 cv
296.259 367.465 294.873 370.13 291.588 370.908 cv
290.273 368.579 292.288 365.551 292.788 363.365 cv
291.088 364.565 288.853 369.88 285.931 370.736 cv
283.202 371.536 282.245 369.094 282.502 366.108 cv
282.995 360.458 289.088 352.166 295.702 354.28 cv
296.623 352.344 297.338 350.201 297.931 347.938 cv
297.788 347.28 296.659 347.608 296.388 347.08 cv
cp
f
296.217 182.17 mo
297.023 188.234 293.181 191.684 287.646 191.256 cv
281.859 190.813 275.324 185.142 276.331 177.885 cv
276.803 174.485 279.553 171.863 283.874 171.713 cv
289.424 171.521 295.438 176.292 296.217 182.17 cv
cp
0 0 0 0 cmyk
f
266.56 208.055 mo
267.553 200.805 260.424 197.92 254.561 198.627 cv
253.082 198.806 251.953 198.905 250.789 199.313 cv
246.089 200.962 240.211 207.148 243.932 213.026 cv
248.889 220.855 265.36 216.833 266.56 208.055 cv
cp
293.131 250.739 mo
298.152 251.439 302.623 251.633 307.702 251.769 cv
297.659 259.418 283.366 263.84 266.56 262.396 cv
250.675 261.032 237.832 255.168 226.79 249.368 cv
231.089 247.782 236.361 247.168 239.132 244.054 cv
238.239 242.226 236.575 242.261 235.361 241.483 cv
228.925 237.34 223.275 227.976 222.675 218.341 cv
222.068 208.541 225.875 200.063 230.904 194.17 cv
236.311 187.841 243.396 183.449 253.018 183.199 cv
261.332 182.984 269.417 186.699 274.617 191.256 cv
281.952 197.691 287.81 207.819 288.674 219.883 cv
289.273 228.248 287.573 234.711 284.902 240.283 cv
284.109 241.933 282.402 244.154 282.502 245.769 cv
282.717 249.312 289.523 250.24 293.131 250.739 cv
cp
f
294.674 355.137 mo
295.345 358.251 293.066 360.779 291.416 363.194 cv
290.823 364.059 287.616 369.958 285.588 368.851 cv
283.853 367.908 285.76 363.18 286.273 361.994 cv
287.146 360.008 288.631 357.544 289.702 356.509 cv
290.717 355.53 293.217 353.873 294.674 355.137 cv
cp
f
274.445 362.68 mo
278.51 362.258 282.402 359.216 280.788 354.794 cv
276.667 354.737 275.481 359.08 274.445 362.68 cv
cp
283.359 356.165 mo
284.424 361.887 278.088 362.58 274.274 363.708 cv
273.453 365.465 273.738 368.387 275.131 369.022 cv
278.181 370.415 280.053 366.029 281.646 364.565 cv
282.174 368.443 273.496 374.4 271.703 368.337 cv
270.16 363.122 274.396 355.88 278.045 354.28 cv
280.096 353.38 282.931 353.88 283.359 356.165 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
274.445 295.139 mo
282.788 294.303 281.988 305.631 281.988 314.338 cv
281.988 323.48 283.902 337.838 273.246 335.423 cv
266.367 333.866 265.088 323.603 265.017 316.738 cv
264.924 308.195 266.125 299.174 271.36 295.996 cv
272.045 295.581 273.045 295.281 274.445 295.139 cv
cp
0 0 0 0 cmyk
f
280.788 354.794 mo
282.402 359.216 278.51 362.258 274.445 362.68 cv
275.481 359.08 276.667 354.737 280.788 354.794 cv
cp
f
274.445 348.28 mo
274.346 349.151 273.167 348.944 272.56 349.309 cv
271.374 353.065 269.817 358.894 268.617 363.88 cv
268.31 365.158 267.26 367.958 267.588 368.851 cv
267.881 369.637 269.41 369.437 269.474 370.223 cv
268.431 370.973 264.817 370.708 262.789 370.223 cv
262.76 369.279 264.039 369.644 264.674 369.365 cv
266.81 363.787 267.874 357.137 269.646 351.194 cv
265.289 357.123 262.153 364.272 257.817 370.223 cv
256.981 364.701 257.774 356.259 257.475 351.708 cv
255.496 357.173 252.803 363.701 251.817 369.022 cv
252.096 369.772 253.596 369.301 254.046 369.88 cv
253.475 371.372 249.203 370.494 247.703 370.223 cv
247.982 369.358 249.182 369.415 249.932 369.022 cv
252.532 362.937 254.503 356.223 256.789 349.823 cv
256.846 348.737 255.232 349.323 255.075 348.451 cv
255.953 347.345 258.475 348.33 259.703 348.108 cv
260.103 353.251 259.76 359.137 259.875 364.565 cv
263.403 359.18 266.596 353.458 269.988 347.938 cv
271.795 348.095 273.324 347.63 274.445 348.28 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
254.561 198.627 mo
260.424 197.92 267.553 200.805 266.56 208.055 cv
265.36 216.833 248.889 220.855 243.932 213.026 cv
240.211 207.148 246.089 200.962 250.789 199.313 cv
251.953 198.905 253.082 198.806 254.561 198.627 cv
cp
f
256.789 338.337 mo
257.453 340.83 250.218 339.752 248.732 339.709 cv
245.646 339.623 243.539 340.459 240.503 339.88 cv
239.775 339.744 239.075 339.58 238.961 338.852 cv
237.125 340.83 232.597 339.566 228.504 339.709 cv
226.997 339.766 220.982 340.645 220.79 338.681 cv
220.633 337.066 223.44 337.188 224.39 336.28 cv
224.718 335.966 225.304 334.559 225.418 333.709 cv
226.161 328.316 225.433 323.06 225.59 316.738 cv
225.654 313.974 225.597 311.859 225.59 309.195 cv
225.59 306.924 226.011 302.296 225.247 300.967 cv
224.533 299.731 222.44 300.26 221.476 299.253 cv
221.918 297.274 224.147 297.317 225.59 296.682 cv
228.447 295.424 230.847 293.039 233.818 292.053 cv
234.439 298.839 234.161 306.139 234.161 313.824 cv
234.161 320.752 233.239 327.381 233.989 334.224 cv
234.325 337.28 236.204 337.273 238.789 338.166 cv
240.639 336.694 243.153 336.88 243.589 333.537 cv
244.168 329.095 243.653 323.724 243.589 319.31 cv
243.446 309.581 243.761 300.402 243.761 286.225 cv
243.761 283.574 243.96 280.182 243.246 279.367 cv
242.489 278.511 240.503 278.968 239.646 277.996 cv
240.675 275.932 243.375 275.453 245.303 274.396 cv
247.525 273.175 249.582 272.082 251.475 270.625 cv
251.532 270.625 251.589 270.625 251.646 270.625 cv
252.91 271.175 252.346 272.839 252.332 273.882 cv
252.182 285.281 252.268 307.274 252.16 318.624 cv
252.139 321.181 252.16 324.702 252.16 327.538 cv
252.16 330.716 251.532 336.073 253.36 337.138 cv
254.317 337.694 256.518 337.323 256.789 338.337 cv
cp
f
245.646 345.194 mo
244.339 352.802 240.775 360.551 239.646 368.337 cv
241.475 368.208 241.675 365.001 243.418 364.223 cv
242.689 366.808 241.182 370.101 238.104 370.908 cv
236.161 369.765 237.604 366.301 238.275 363.88 cv
239.704 358.751 241.311 352.837 242.561 348.108 cv
242.639 347.059 240.982 347.744 241.018 346.737 cv
242.804 346.466 244.21 345.815 245.646 345.194 cv
cp
f
230.218 363.194 mo
231.689 361.008 233.546 358.272 233.475 355.309 cv
232.275 354.373 230.975 354.83 230.047 355.479 cv
227.897 356.979 225.047 361.43 224.047 364.908 cv
223.683 366.187 223.44 367.708 224.218 368.68 cv
227.132 368.215 228.782 365.322 230.218 363.194 cv
cp
235.875 364.394 mo
236.032 365.822 234.732 367.408 233.818 368.508 cv
232.89 369.622 231.597 371.15 229.875 370.736 cv
229.011 368.208 230.854 365.744 231.247 363.365 cv
230.811 364.644 222.554 375.286 221.304 368.851 cv
221.226 368.437 221.232 367.301 221.304 366.622 cv
221.847 361.344 228.032 351.994 233.989 354.623 cv
234.261 353.873 235.597 353.43 236.561 353.937 cv
235.296 358.844 233.411 363.13 232.275 368.165 cv
234.411 367.844 234.225 365.201 235.875 364.394 cv
cp
f
233.475 355.309 mo
233.546 358.272 231.689 361.008 230.218 363.194 cv
228.782 365.322 227.132 368.215 224.218 368.68 cv
223.44 367.708 223.683 366.187 224.047 364.908 cv
225.047 361.43 227.897 356.979 230.047 355.479 cv
230.975 354.83 232.275 354.373 233.475 355.309 cv
cp
0 0 0 0 cmyk
f
229.532 275.425 mo
236.918 273.725 236.503 288.86 229.532 287.253 cv
225.482 286.324 225.311 276.646 229.532 275.425 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
229.532 179.599 mo
231.611 187.741 222.447 197.263 214.447 193.999 cv
211.062 192.613 209.79 188.941 210.333 185.256 cv
211.162 179.584 216.083 175.256 221.133 174.627 cv
225.382 174.099 228.683 176.263 229.532 179.599 cv
cp
0 0 0 0 cmyk
f
220.447 338.509 mo
220.519 340.866 213.547 339.709 211.019 339.709 cv
207.119 339.709 204.54 340.416 202.104 339.023 cv
202.269 336.73 204.333 337.659 205.362 336.795 cv
207.562 334.944 206.383 322.717 206.39 319.652 cv
206.404 314.795 206.94 308.967 206.39 303.71 cv
206.169 301.574 204.969 298.688 203.647 297.71 cv
200.312 295.246 193.741 296.839 191.819 299.596 cv
190.448 301.567 189.94 304.003 189.762 306.624 cv
189.434 311.481 189.619 316.588 189.591 321.709 cv
189.576 324.645 188.905 335.609 190.619 336.966 cv
191.491 337.659 193.883 337.045 194.219 338.337 cv
194.876 340.852 186.298 339.701 185.477 339.709 cv
183.691 339.716 182.927 339.866 180.677 339.88 cv
178.634 339.895 176.234 340.023 176.22 338.509 cv
176.205 336.987 178.884 337.23 179.819 336.452 cv
181.791 334.816 180.819 325.859 180.848 324.452 cv
181.141 310.931 181.126 294.268 180.848 280.567 cv
180.398 279.189 177.72 280.039 177.077 278.854 cv
177.977 276.546 180.934 276.496 182.905 275.425 cv
185.134 274.218 186.962 272.546 189.076 271.482 cv
189.19 271.482 189.305 271.482 189.419 271.482 cv
190.398 278.367 189.269 289.175 189.934 298.053 cv
191.519 297.688 192.69 296.432 193.876 295.481 cv
195.105 294.496 196.391 293.36 197.99 292.738 cv
203.047 290.774 209.662 292.281 212.39 295.824 cv
215.918 300.402 215.083 307.981 215.133 313.995 cv
215.154 316.488 215.133 320.188 215.133 324.28 cv
215.133 328.573 214.04 335.616 216.847 336.966 cv
218.312 337.673 220.404 337.052 220.447 338.509 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
220.275 354.108 mo
222.633 358.237 216.697 364.029 217.019 368.68 cv
219.361 368.165 219.433 365.38 221.304 364.394 cv
221.054 366.479 217.533 371.9 214.79 370.565 cv
214.047 367.68 215.404 365.101 216.333 362.68 cv
217.24 360.309 218.897 357.973 218.39 355.479 cv
217.168 355.423 216.062 356.151 215.304 356.852 cv
211.619 360.244 209.705 365.68 207.59 370.565 cv
206.961 370.508 206.076 370.708 205.705 370.394 cv
206.762 365.394 209.533 361.201 209.819 355.994 cv
207.533 356.287 207.154 359.38 205.533 359.766 cv
206.812 357.044 208.162 354.395 211.704 353.937 cv
213.29 355.665 211.562 358.708 211.19 360.622 cv
213.383 358.408 215.247 353.487 220.275 354.108 cv
cp
f
196.791 370.051 mo
200.74 370.943 203.055 361.787 202.962 358.565 cv
202.883 355.987 202.004 354.572 200.39 354.794 cv
197.376 355.208 194.612 362.801 195.076 367.137 cv
195.212 368.443 195.833 369.837 196.791 370.051 cv
cp
202.79 354.28 mo
207.597 357.208 204.276 366.522 201.248 369.365 cv
199.447 371.051 196.326 371.779 194.562 370.051 cv
190.419 366.008 194.405 354.987 199.705 353.937 cv
200.376 353.802 201.754 353.651 202.79 354.28 cv
cp
f
202.962 358.565 mo
203.055 361.787 200.74 370.943 196.791 370.051 cv
195.833 369.837 195.212 368.443 195.076 367.137 cv
194.612 362.801 197.376 355.208 200.39 354.794 cv
202.004 354.572 202.883 355.987 202.962 358.565 cv
cp
0 0 0 0 cmyk
f
193.19 347.766 mo
193.805 349.559 192.905 351.951 190.962 351.194 cv
190.312 349.744 191.083 346.93 193.19 347.766 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
191.305 354.108 mo
192.012 359.244 188.376 362.937 188.048 368.165 cv
190.098 367.915 190.098 364.744 191.648 364.565 cv
190.619 367.415 188.676 371.015 185.477 370.565 cv
185.012 364.93 188.898 360.423 189.076 355.994 cv
187.155 356.529 187.333 359.165 185.477 359.766 cv
186.562 357.137 187.926 353.88 191.305 354.108 cv
cp
f
183.419 354.108 mo
183.848 354.651 185.648 353.822 185.819 354.623 cv
185.798 355.751 184.077 355.165 183.077 355.309 cv
181.612 359.559 179.319 363.887 178.962 368.68 cv
181.069 367.986 181.291 365.408 183.077 364.394 cv
182.062 367.516 180.284 370.715 176.734 370.736 cv
175.541 368.087 177.313 365.401 178.105 363.022 cv
178.955 360.466 179.669 357.894 180.505 355.479 cv
180.219 354.966 178.669 355.716 178.62 354.966 cv
178.427 353.802 180.041 354.444 180.848 354.28 cv
182.291 352.737 181.398 347.994 184.791 348.966 cv
184.698 351.044 183.727 352.244 183.419 354.108 cv
cp
f
176.048 318.109 mo
178.148 318.323 177.626 324.424 177.591 326.338 cv
177.534 329.58 177.898 334.052 177.077 336.109 cv
175.612 339.773 166.855 341.737 160.449 341.252 cv
157.52 341.03 154.299 339.987 152.049 338.681 cv
137.428 330.181 131.635 301.46 143.649 284.511 cv
147.113 279.625 153.549 274.875 160.963 274.225 cv
166.441 273.746 171.919 274.561 175.705 277.311 cv
176.512 279.718 176.12 282.675 176.22 285.367 cv
176.319 287.988 176.955 290.938 175.705 292.91 cv
171.877 293.188 171.691 288.003 170.563 285.196 cv
168.613 280.346 165.17 275.132 158.22 277.825 cv
149.249 281.296 147.799 295.21 147.935 307.995 cv
148.042 318.381 150.056 328.602 154.449 334.052 cv
156.477 336.566 160.413 339.337 165.077 337.651 cv
170.063 335.845 171.634 330.788 172.962 324.28 cv
173.413 322.081 173.848 317.888 176.048 318.109 cv
cp
f
170.22 362.165 mo
171.47 360.201 173.134 357.779 172.791 355.309 cv
171.47 354.237 170.013 355.051 169.02 355.822 cv
166.07 358.102 162.434 364.658 163.534 368.68 cv
164.584 368.801 165.448 368.229 166.105 367.651 cv
167.648 366.279 168.999 364.087 170.22 362.165 cv
cp
173.305 354.623 mo
173.577 353.873 174.913 353.43 175.876 353.937 cv
174.698 358.93 172.827 363.229 171.591 368.165 cv
173.298 368.144 173.848 365.516 175.02 364.394 cv
175.52 365.937 173.013 369.229 171.591 370.223 cv
170.941 370.672 170.005 371.115 169.191 370.736 cv
168.484 368.337 170.084 365.829 170.563 363.537 cv
168.798 365.137 166.855 369.344 164.22 370.565 cv
162.384 371.415 160.841 370.565 160.62 368.165 cv
160.17 363.208 164.77 356.279 169.02 354.451 cv
170.591 353.772 172.07 353.658 173.305 354.623 cv
cp
f
172.791 355.309 mo
173.134 357.779 171.47 360.201 170.22 362.165 cv
168.999 364.087 167.648 366.279 166.105 367.651 cv
165.448 368.229 164.584 368.801 163.534 368.68 cv
162.434 364.658 166.07 358.102 169.02 355.822 cv
170.013 355.051 171.47 354.237 172.791 355.309 cv
cp
0 0 0 0 cmyk
f
164.563 348.28 mo
164.813 349.323 163.084 349.151 162.506 349.651 cv
161.605 350.438 161.099 353.137 160.62 354.794 cv
159.148 359.894 157.57 366.315 155.992 370.736 cv
154.549 369.872 154.506 367.772 154.106 366.279 cv
152.856 361.644 151.306 356.43 149.992 351.708 cv
148.656 354.83 147.413 360.102 146.22 364.394 cv
145.871 365.651 144.742 367.801 145.021 368.68 cv
145.371 369.794 146.97 369.344 147.42 370.051 cv
146.442 371.279 142.199 370.608 141.078 370.223 cv
141.306 369.308 142.456 369.587 143.135 369.022 cv
144.135 368.187 144.371 366.087 144.849 364.394 cv
146.163 359.758 148.256 354.13 148.963 349.479 cv
148.777 348.809 147.456 349.272 147.42 348.451 cv
148.127 347.401 150.62 348.337 151.706 348.108 cv
153.334 353.68 154.749 359.466 156.506 364.908 cv
157.956 359.958 159.556 355.158 160.62 349.823 cv
160.434 348.815 158.67 349.373 158.22 348.623 cv
159.277 347.302 163.17 348.188 164.563 348.28 cv
cp
0.96 0.59 0.04 0.17 cmyk
f
303.955 434.905 mo
305.436 434.865 306.965 434.775 307.314 435.865 cv
307.564 436.995 306.766 437.075 306.355 437.545 cv
306.385 438.396 307.245 438.415 307.075 439.465 cv
306.005 439.255 305.865 438.115 305.154 437.545 cv
304.625 437.896 304.825 438.975 304.436 439.465 cv
303.425 438.795 304.195 436.345 303.955 434.905 cv
cp
f
306.355 436.105 mo
306.635 437.085 304.686 437.065 304.675 436.345 cv
304.484 435.265 306.175 435.545 306.355 436.105 cv
cp
0 0 0 0 cmyk
f
0.5 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
27 452.16 mo
0 452.16 li
/1 
<<
/Name (All)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 1 1 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
@
36 461.16 mo
36 488.16 li
@
27 36 mo
0 36 li
@
36 27 mo
36 0 li
@
525 36 mo
552 36 li
@
516 27 mo
516 0 li
@
525 452.16 mo
552 452.16 li
@
516 461.16 mo
516 488.16 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Frank Bilotto) ()%%Title: (CNMC_vert_653.eps)%%CreationDate: 1/14/10 12:37 PM%AI9_DataStream%Gb!R&ks?=^dPa'DTR.6>=X@fiYRLef!/!!a`\u\X!85@C_NHm,cMQY6QFW<lZABqQ9=:*YJtDCSgjK1!Z>tdb+sSRMAi;^E[hkC?%5;tWQY>f;KXjI[2XBM&i20HA`1UD/u[b]-nA^iS5doBJ)5>_C)cM@E5qmM",m@:Y4]gh1re*X8:)um9_X05\kl'k`HUj[[Iq,__!%\oiI%R9AFT:Rd^&m:N8Ce*:$5\qW-!38M*Z]Y6A8^H$(R=/qR#U"MQi&W_8q'TJ!bV0Vh/r;-DeI7RkV06V9tlQ3cZ:\jISG/$i=%VhIOjfXUDC4#atgk76)ShRu,*W]HGID9Pqn`iG<:80</fWmr,bWmNKSaE\o>nJ1?Q46Z(\&'^gj\f5q?2QMW2i$&U^s-ro`[f,g'%fC-0EQ^um7o4lb1cJ;3qHdr5nFc1^9!qE;T3*!lF'_p)M?2NdP]%(^TZ?4!`gJu+U*ViY,,FAj*%GFb*0W_jhd2Hj?hfRCV+ZeA-%?+0d@69%*B]^9oh^B>.(Qfit:oksfnnp^omVPE*7Bmk>Xh<l?A?M8*lguQXgY<!Kel]nJ)Gd_nR!d6F"T-!ur%e!TWTC"fS@d!S/%?s0ITRehp*A&%\4].9i!"L%:J\*lBHH*oM2F/l\-"14*K<II68)@d9R<:8IT,+U+1AOJYAVh8Eo"c#K5YIg,c05jq!]'JR_%YU:b%jqtOgflm,\,,@!GW-\#eG>\)Ys7sK\Z<Z+/^Ycb*b9sT6]F)^,[/-gJRGcmSie6(;jY`,lj6BCiUQo[-[G5Z.qCR;U6$0Wcrk#c3%:ES)id6H*u:WL:IhoF&4,A8r/r&.8sCRY%L2!*J('2QeMNe:YuK27M[?B0YENmheKA,8CcpceQLoFFap5'm#gHJpOT7'B&^]c%>B%fkB<57K\(-9mk]33Y%a!2Xu4%.F6(mA\GAjR8L];PJR!j=dd*%oYR3h'>:WJ@&NQ9G(cLOK,rnup)QCbT#I;j';)KRr5;,--Q*d`%_GBM;^X7p%@8;BNb`?)_(Oi)SZ\c*j5?PJ3=J.'=_G>GTFtTh^[EI97G-!gA;:%]0TbmEXT,:-R.(bf6"Cq4d?J&V8@=a:uMuDT^%5%/YeJ,GOrUBNm0$i@h;_4jb_^fBO;MuaAqjT5;_30X"AeBpqI(;N@^0!!%8AR.'pN#^bKH3F8p#J1?l'>)02Z>97Oqnl5%')KWI%"=E[jI\I?r=.'@C45_-1SBN,**RJaj.fm%dj[(C_$NXT;3#/sHl3-B-YJ:St%knX_:"G>2_<`qg4>5U85?YO9VGOVW>[Sd$2#3cj%Doh>:9P#R/er[3>3/+^me/cna8:PkFUnN=f6S&I=%e5&a"d$[O+Z+eY#3u`\Q#YnW?.\inIZ%1TeN^s5Do1E&ca)VQpfm_tAo([T%_Vaq1Fld]>>Q/o>I.k3\DGU48?^G]Jhst\q6U$:?j^2S2F&Q8Zhst]$90S-Gje"I+-h87e_b\+LHk&?^Dq^gl2(ZAMf`XE-r(39t%qM$]`DAc0DWO^`[k1].h<cc_:gisUDDW7R,iG"kP[dMo9e;nq848Ea?34:&-n0ee#n_7_d1nCUTh4nlnhh8c?BhNlhRJtOgijfN"%1[BDcB:C^^mDLno(X`6g[epqBU=kpSh6Kc0`)@N/h-+G`9KsDCHJP>6FR26&qrht`7H4J:nsQ)0o`2)!T9S4AH_'mCbaebh_NN#:%V:q]ZK9bW:*:p8p5nm+-IoGLEi+[ODjr(8/e:3+9Qi&MB)cu1Ia3_'J8W6)fHPTK*#&#.;%+(QAWVnjJF:h9*J()k,hgkP[T4s3t%G26BsM2Ko=^W`f,F6I+A/>'\aFb6h$=DO!#O:!7ibY>mJ11TD7cU76Io;uMPg*Zd[M4BYjZQsR:m]eK!F!n]T'Kd>A1P*0O%SFa2%!N(YD=S?[P\^"U?r"gW_m$$T(+H=`DjH]-(I[eSo5]uXiloY%cA6Br`7>$,2j%j/Cm#<0HR@5>[K%[[dUiCTDWA-Ml"Qe#eE(D3V%,/'cH`n]lDo9:3>NIJ=>G.u7CleJp$fT,P^YM>;4p]Oaf=\><'as]i/dkf3*fPqVCBZ")^.Z^M[M*9]!oU+i(X;UW^VQ:^.)9;II%?l"H%O0tXADe(3@P4+Rd;A?>Vd"JBT#*rOA[3J]lm"XKXi\0/JJb]Qubq'pRIX$T:Z^He35YPQS:O@ZJ>PH`td@rCg`OfgGl8;+f%!)(b#hFoS/2HLek7?`ZHnumIoTj]?s=eH4;HU""Ce8,^;b58Q/g`,g[U'R?OH\n'-g]Uj)$/0GGUD;CVdXlm[n`!r#b*oWf!R\+V%_j#RTaSD]b9(Y>SlX5KOTU@?BSRff@n3ug\gK>_''7-'Z[KYe_1X">UCa_gmrnD:%?la<8(@B6`5hunE1G*<P7\M]6LkO<rZS\/>%eda*9+Bqeq\0QtV0T4kM3Q=j&7*Uj[WPJBrb*YKp/@u3n,*Y*<AlHe`ocM(]Wu6P8n;ZYY!FB'jm7`P!lm8#(e.QNtA6IL%i=/C<%#5^,W:10&a3]*K6_F_\;?hYaDj7#V+D_`mkYTrkQr3M7.+^*8r'J?)ign]WWZ7X38U6Upc9;'m)Y-90I?oX$Xb7@&O\O9I))8l<D%&TW_kQ,5%^GCts.hFT:9nq_u3I!>_>>jsZpl]jqI3a[Y$B8X/@3`pjk1\$JQ]L&a7nk_5])t]qL8%Ji:e69]Cm!Y"'ZS#&sa^VE"%_Q!0Dcm!eiK1tC))<SSEeJG@Wce1t^V8)A.?0NZ^)SQC:i2:Fl3>h%=o(_IB%ouF)1O0d@U':'=rfb#GhVe?j%A:5Z&KYC7&j>2F%10&p(YZFa:.1CS.qZnbsVA[1ok$IB?8VW[\dkXAc#S2dj!j5DW,*)n7R)]h&jp6J-MM,GE*m"]_/[T]R+5R^F!_NVQd@\I&K`A8C%hO3"W7R5k:DF8Cc_q\>_;NdUpk6k&nbeRT4?&A]rommPW=qb"2:OEPO.*m)NT@E%TPoHe;QA9jJntk[aIg*SUZEW`7Ya.GgHWSja%4Z8RJU81T7G/Yh-Ze'b,?:dNX%=GCUG=4g>)F/S!Kq`mt'G>dJ-T@<$E^>>8T9Y'<Cf[DX;cEC'TMsI3b#VKI!`6pP"JZ!.`-q`"%#Bh*-\/^'TBHl,pcrWK?JZU3'.[6'G*2m/^4='X<;$BDEar4c^Ms2Dq'u;Q;&ZHVoD=F%Gj2bs?>W'm@;/%&lF1/9BJ8,oR?>+nW%bqqNcC;C;Z6j+"9mf59Ie,i7I<QnLp@ArXRVU/8O$FBraSRj-H/5lOA#DqsVeI:e<2[^[Ykn"o'Hbc?"^qQ&HB`g"9J4-&Q']m]U%JJZlMl[f'K;FNi&$6Dkups!-m-HF_I&5f_V`(R=lblE@s`J.3QRE\H;Bfepb1jKiai)6gO!b`uSAN?LG>!NOWZKe!"*=N&?WY>k0%)[Mu;c\ciZ8<V?Va5-qC!_Hc9Pe-95*T2]n>pMnd$^+*Js,[Sl.Y/KpR*Z#Sfb\r@25047F"<@!lRIblr='_L0GQV-MM9&j'u(3s%KpYXmKWKj!*lqZM5`jBJK%'eS$n4Php.AM?>+/&j>!b#BfkMr5gSX3<^/*\E6H@9l"jX!?D+:L'-jm#.7-AR6!05K7/?V88YibKn%H^jkdnq>T5>2cEX&SN-74V$drjdC-?VV,biO<406m*2k<Js-Ek^l2r7p@k'9jXC*e",g.'Z5uI<+;raqG,LU0&e0rqX>e&[fS2.M%,&#u@.F68sPsM:!.e#[R*p_g6_03W^`O:r#!(U^h2R[5K@<#^tfOV8lHk'O,G+l"Qi3fWK7.2UQ#I+TB2q_B00hh9@4jfQNVgKj1%?FWBK,k^^sI`ZD8NQYtn<Y[\%j<LVBjH]W%^G&VDjZfpnZ@K\E)Yc_e8DXC@Bo9kUhhmCC1[uqhJHGfQG*Ga.(L'tl#.Z']TKk$3%LVp'RBNN3,);.1-^]qt>hR*Zg#O<'a_@Z4uF958?9EdM&"s^p$&Y9XU$XVDRYXJ#NV$KSafFf:Y\jE+Wqo;n0>M%s1Yk&Wr9^39q%TPUaBb#\V9LmN_Eo^h]sWi_s?rQNj["YpGGY=@[Z#p?o(fANmf\aKB[mfn:52b397rLN"GnE88Q%e[QK74pshJA:VL&$PHdX6jff%rbhK(8#J,OIaL/k<tAO6?e(/%p?b:e^8foJ@o]+nf)<e,g<s#??/EgBNq]]74I)Phf4VkQkC%YY22$H"h-]m1_Zr4`7s[Y6]$\4[%rMmTtFKPl7MgmTdVJ>6oo`+BIj,b@mI=3W-:=#^s,\L<LpAaGjU#,T$d$OdWUGlB.f9\_6Xh.r,k?/I/Hp<ui^)LLdk&m`Z%\MpF%_=&"Iq9R;gkPDK.'2i>9jfm;&?_1W6O8eD:gGd#?gMHoRFDi@2j4:?e^Y7;1]>u0$/ZmcclA&F7Y%VLAl,VoQ"`Xh>EsTe2boMr_%X%0p.GAUZ(s&YD2*gIl.ldfpR>NPRpO:XWE^Eh.b,"^JmKA*4K(o*h/<\'Jm,<t,02orMps)[#a<L3As49)nR&(Qrfgh-\2li+Kq%FhYG7d(3pmQR^0KQT',A/(I(h^92-!g$XasH<U[gn+J4sqOL[cp^_dt8UpZ8VLMUJlDs45Y?LUN>!Ka'+D:-&7:fUEo!D;#VJ59R%09C>k/oTqp%pRY&&du@._m;sA.O:>0X/$@R&'lb[H(!1[G9rZX8Iq(XbnN-B<Dk98o_d[f?t[:[7R>cmm3.@f']?L=3:rn[ns+/E%LAAS`1C]R^bSaZf29>b2CZ':ppe2rd:RC606*'mDI/`nUs.FG\cM[6IFme^flWa4s7N.qHH$8(`PGV\RfCa$jp&E8JO"c$YfD2Vn%l\fZX<r*Z`j^!J^i*6-Crr^r,Ds*_Ip.kX&FaHo@.?A.aZ;"e6s(Yis#CY"VbNX4D$n^;b8p[a<s%B&,gUV0f!6fTKr2P0B"u8Kj%V>onrc7V+q?8&QB+q?B$%sSc*pD<5q8EbOG,kODoPhQ.Klg22gL@Bt-om[XMYP_Che^=%S9[VML3S-[sB-l6GNt,6;/_E\BH,O0'%amn96(UTM.U8@efJP1>Srq0X"NW6n4d(@"Ss5,Ge:"-%f-tuk6gMU<[n+BcZo&m23gbn<kT,#4tDq$AjY_VW3?^DT-?Y-[B3rWc9%<RV7YL1^qLe_d3Jn\8Hj<o%g[DqK74.C5RprmTUFEO+!V'Pug2djLVm^\so\F`M&:Q%%l15l\1K46kUFceD^uqB%Wr859&\QZ1FA%[k>`CHK[Ef#HhS%63SLS:fjIa;?jb#:;E9AXUF5>C&sUW[!Gd[_XH<'qMD*#oq`j+;q'7I0((@XdUoPGo?MK&Yc.6NlM>qD;gmEc%p"S<Gs(Ni-?JkFVGHJK#\(\I,\\I8D<ud"ZdH^GO3j%g=oc1rXW?HAcqEq8TBq3Iss8);p?1#-$%b<jHCnb^3(KL@5IGXF7X(SR#%f'Ra/JXN;-qVBFs^nuEQkO\#_4'FD@lbBLVp.sDsO=0J-m9[F%=1d2^X51HVLoQeJO'W8L?+oTI;#4E[__D`Fp[ICT(>p+XHe%Q_%)BaPR>Ra>a$\uL.m@7P2QE*4r1-@gM3;Dh:rZ-,0*o;_2ZJTNTp?l,&,No*R\<e"bq1("9gG\G(]N970kC)$d5J-<5%;j!<]_oK5%AD!S]7iA`S6tD$)G0j0K+lY0uLNc/1eZFbQId?@kqQg.I!,DU<ld\;&P)goiqlSVFpT:(Tl=&j.5[?dKbQZsEXfC!LBT=V1K>1EC%^#jX>\EDFgIS:^1imW+F=AnLG])D;>]>YH&(HM8JUs`V$JG]8EI;sO^'-WaH&Q+n&YNC@:(c_J/1aYV4H/@dlZnKi?Ye#5/l,UMu%e,7eU&SRT#qctU2U(HH>$,2AXbG^T2$cY/`$4&5e=#e[u`UZ?]6PEo(GNZ&&"9\ae<%,k+G=2bUG<ajPD'cgeXtK1g8.&\J(J`\$%',5b0X=c!eR:("oo!3=ke"nP&P_,[s59Gi5osPNk^Zso49@-H&ZJSE;jX5oFY'&L5/k]B\O90GpTsauAhGE50D,d%;G%,qF%[Z(2%B%_uTQC)WWhV6l;`?f\Y,=%CB#ltqX](433kQf/7G_kHKnt@ho"e%%M"6l<dKQQ*F?AQHj\s3JcF<;6$o$hVt%H5)RSiOQbhiJ_Q%^jTHPW`MElcNlYOOr)Y%F%7<Y++BW]racYnO)H\tWG`Q-dP,n$cB$07^u*D.MV+VN)45WQ;pV2C8O0Y.?SSXZ`p`T(lPD<#1L@lM%F2c&W1"AKF7a!o8G6,cjhj.Tuh*pSE-!iZX_Q2u'3CJ5Nh0&%MGZdf?RQN@U[CB_]UGSq`#$J6YG/LhHlOE)/DW*kAVRrFpn%UnJ%Ie;@m@GQAY\n)6<Mg"R[kA;_]s(-@ae=J+uE+m8t#oE;Np!,2e2m'^OY0s5;[T(_gESVp0GY:)m&$Mg;WTZ@h/SB;MPN"P\ZZl/<%hW[AX$iq)(rZK&PX4.$>\20B9`JQ3-<X'Hs/$8?QF]\TCZJT$bCV0IhF&aS`O^*Q[*5i?n$\e@,o*ceEJ(Yo?5WoP.V7I:<6Sh-i%E4JVsl#KAH`/nlm8<UoQY&&3P[CX$Qi,V<h=o3gG.3]m,F<1^E&q)!6U."IKTQ"q`o6[h'X"Md['Q(bb7TNfhG=&s=E:W%t?ba+b%li-,'(:!:5Y7<p]j?]sd`P"=S5If4Pe28,HM"^cDY22m1(H+7YHN#H?Lo?r/6iE5WOkigm#l,]g0=nhVpL`\GmM:HfH:7lHVM7'q%k;WDTf_LYiSc5g9[fG?^F[TKqD]!ne,$/l])gP%1+r"9H[o`34@[M,/m\-1KTOD?Y-r7Ud@k=+()`httUX\"jk[J>N<*>oWRBHq.%5DO"^lLS(&-C3JgGM]oK#@e51=.ji7e(s]m5P]sUIElbX73JEjrQFLmGUlk"pQ.j&U^mj^@1&_J#fE_iMnFq@,dU;8r[c]eR4Y>>%acF.gP[nEnE(:8IgpV^@_MCgej<X'X[^aYk%f+fcQCNqZ8Cq3#o(sZ:ccf^8!UOFO6R2hF1"SNZ8VU6=aR.cR(K^ptTi\I@mVm/Q%kVF#o0Kiad^`o9:DpM&_"Rb*W]a]S^feFN8'c"=M!6fc91D59W3ETDM%aV-KIKhGcS^1X+jmCT@Y>;=ePs.kG8%[2qY06LglE0A9%a[eePh*\cCocN#`T6g^5o6p#i8k>3(706a^L,VS(\ZSu9QQ8)tc]YuDO^P+g@c`7'S6Wl38KAfaJ;Y\G"QZj3:=g%d0o,6tF<Y9f%-0C>6mLGf/-p<\A^2"<^7Q\L"%@KCQZmC8<TsDKen/C8ZHdEs`(e4O/P5\)e;E5pYj1U4"7N[U-NI'1/C#73V"I.sIF/3ZAjTm\0%2oA0;c8<ENTA!i7ka/u=c!T'YICCW70A<nK_-p7s$0r2YA6D"!9b)IZ,7l)P=pp+Gab$3!.a7Ub]>H<DK>hg+#dlpK1``7%]RnPk%C1+Pr)hgWN;;e?"Lp\MSPg`0LU3GE66EL#S#VnkX?m>i?16TR*#K%BO%Tu9.D_[:j),sVg]sNUDbBGh,"B'G!SV8KYP"7.bhZW;g%:gZ6K8K5R)1ZNZRmd4!h77Rplr+Xl@%]dY0Pt)ZX.["aK'ms(c7XMKGLAC[C@s?P22r!gM0^@YtrS:aaH[iK*/MFhA=BtaR2t<5C%4aXME%_d0Dpkun3C9G89Df#FB\$'tPhEGjprm4D@#N$GXcegdu-K`RDk7b8bfsd67M8e#GB+m(<I;`TZfC'r3Ct?jZTDj(a2e2O)%kr1`2[J'IoWj_NtjVl_3/Zq,B;k*1B`r4KJX8NQuHb0q]_7,n8p#VdY@pbjFrRq+u[!)ce48-h@k1\gucPtaPN$EQ8`S(rQ4KhWV%QT+Qp@=r3t-Q;T#C8]BR/6VO5Vfs85WL`JO\m9+C;Hs-Fjb@%j1Z8hU?Ws'Rg4jgd\@Oin`9J5R=2E%lD<(WVq\ah;^=Fp.S8:ZM%IG4SNrAq^h8mA`ak+WeZD)^\#`D8>6Up73j&*gW+mH_ih?]Uc&ge$llk#F?YddQ"qJ,74EUbk_dg;]QP[T,+=-gc1$oXmb>/:V:1%.XTTVP><Ya^"MYq?.N>opYY;cF(`s?^LU'MprqC:gSltdp&<Ek*DT4k*6$[S-`sr<]ZpZLAFm8hI;;#0baMLHr]&fWS[:0D`3<"F%ZM/+)>\MmHh32ZV2ZFa9NH]"koU+0#iH4d*788(f4%jgTA(Bq[?iJ$.l3loj>B-`nmXEu>Iu$\Ze"gN&[JKRV>1TL7RI8\=SX8<B%M+O6?mHIU,V!$QPT)LHkdY"ZUWB\],/"X+'PF/d;FgocBRri;f\CEfT:MS.H/3^a25001Wp2^33q>A*f%h#M@]kU8kCGfa&B57;,%IJ7I$UaKNWk1?054=Oqp8P6[o1KVcgO"r*=?FiABSTM==o>U$s8SKj6B+rJEhVI-IVHl^npe>g<c$_;I!5!Hs8b_&#'/f#GD([QB%F0pGiSgUYakZ_DsR^'PTHD0_UhQepbS_X%iF0DIt315uE>3K:)9j3tDBjY,92V)HCWC]>#CI]oB?M:1A[4ckCmA59oUdq=u:O,iO%Z1M?5^?iMfaIBQ1]q>8eAP]m%Fas&Tm(uCh9!e#on+ZKM/qB"lQaa0i-Jd/-hjH-<-=**js6[^J]NQ_!Y92?@(31cc4^IN+aI2[Y%V1!djDE]d(bp(UX]`.a(j6!\%bXoSClYgek]fB>FnhG(2VKVgucSM"9F0DcSb]c:TpDTH`DZ-^u3KnbN'-@^kI@7H"g#(p`0oP7a%M7)dMLX-__>tcutl`$fRhsPDXC!u2#jJ:ZLhG1+CYPa+,V"Uu>g8b=F/Z%iM@s3!4-`5fKlJ:=CQW'9YQ51#.onb>#:6R#Qd7``R%0-+CH?(9SPi^nD2"lP71k3H0<oP8s<AR#oj00\3;rXtDIVfh:0??>k5r2*&TpW6"=QYRkee?g`ElLDRU*,j%`H,c&:CWH>LZ(4X<%mb)6F=jq%uU$k46r7HM*99U:c.I3__>sGqa?CWaBL#5D8h=,#PNq^<$bl%1K2=XAprNb)%qA,7/27oltHA>F%h\-Kg9+s*#e!p+j%6`cj73c9"Ba1!LlRG@U\kM4?D-?EbLpU=H&p"(3GkM(ICdoScEg#)3]R<\8u_q(=HgR(,^\_DVF\,13GQi6QJp2tk)dD!s&ei>m<%Z$JX(oe"j,PC%X@%ThH[[EPP^K2;@AgtLqppi\)<WO1mj-IW[DmlWUJIGS-BLh1u6D!l`3fnUA(hejumR-n9ujF"SGFP:]jI0mZJ%6gW?LoCqj%F$BKcK=AUEpJ/15F2%VJqo7tS)d2&"@L"iA3jl#sQi6Quf>GCIcM7,!_WLrBVnYCno:Dde*lM5(NTZKuDDV1Ep;_et%J+@_DqqE4Hf3bl!G:.GS2Y5nP`V[3&K=.eY]A;YJDp0#9k2u/M4oMLfZ2=CB`XTXV$6e%Ul_c\TM6F7TiV0Bso?ZhK*Z2i>WkU@g%S)o_+B8tW^>EVSTDP$0nSBHW"V`OX=9:Kia9J!mWFu6IGHLYl^mdp?>r]5^ffpJ`*S_=\UD=r2;MH4fjK'*MS?@M"lcB9^QnK.7K%NeHGRB7idtk$PiMIPsu&g>l;\4'[fh^@%dOqu!ZFVCh_9Lqm;e12#;5A2OEQk:.1Td7LJ90.`<^dmb[TCjrGH:<J#\cD5")P+Qe6%[Dub*SpW&UFF1mMT+lb"?rAd=WCNO>m/J`T[+j2P!.Tu'C)p#=_>EB6gW60,:S(76PHsj':'t8E"#-hV]Bi+kPEYo9-_!?.ge!>Q%@K5NWeX;$^J!N$-X'j@mD'`eT`M[::,'Qr;'ZYLW?-8]PEichK,_8sDM<kD;T)V]E34Q^OeaN01440*OMl`M6YFeUT(pSF;H8Q@u%(>*[Z.\mn_=\A>YdTe&@6[pt$_sK3e!e_%CIf&eBK(5lfoj^_N%@qW,qi0.4QJTVtrmen6,iWE#2q0<\D`;@'/"P5&\VkZ'd6uH%%/H9I'cJZam@"O*r"9C1(C-HS$$QHjM@OIYMkS&fde^^dia:FGmTuHq!`QZ3ELJRmP?.=&8"`#dYR2MFs^H`8`B0iZdojA#oMlULQ%:'?(ZaDW.Bd`3_S+79rNQ5%>IA5U&"74hkAXXruQJZ$Fk'&c(Vq>PdJEjkd"J^-L:7fDV2rN5=2qnr+t5N!iq5&M-Gcs1qtmaX#h%/\P'S,!J_;Iln,-nEE7oYfc!Eqrfq(T0_6f(K^in]e<+H;3*@<=PAhh59IqAX:V\SPo[Oq4hL:sa:I4CS-=+jQVeoUef.19W0gJK%n=_-]h'PS:esFB^FFq?s$Up+EiSrMb[\[njm;3Ag0XCei^%Xo4AJq`,qXV3>kK;;#=LKmAa6.-g1^1KCGen_e@QT>qkApprgQjku%FDq1&>N>M2Q`8r:INgn=[h,[t3^(dE<FmN0fDH<=<OQ^.=h8*31$42l$+';9ZQ>n6!?9&B>\bG4T>YU>.%42G^\l1T$W6IcJGHH*%pF/m2^DRSWW21:<-s?GpW.,k:Y\^I(1HMb\idB@Hgs=dKW%,R4*-<o(-Dtjo['_/D'X$MY,#&hck%"d?._W$]+:"Vs34UpB9$\Mo%q,_5!H$WaHJ+E72RIS>MpuK36-J5/S\I:!i#UNR/*@#+Q^!`Y=l/QZTX=YrK[K2\+\7asH:b`Eg)'epifT&VTZs!g0=IC%]h^e0p%_:Fh0I9QR%6ntpM^ZD.^ng=feA[n<E-6:A*CFX6o01)6>n]+s6%L.]UFJnl>Aarii).q<^jj,H\4&Ar!Tdhj.%!FA[g)=[2")4/E%/?VejZq9K(E\q-4Y["5H*/K<Sp(8D_QY7U];T6$JE>W3Gj%1ij\F+lI[N96*0<Y"M7;afo%!<l%q;CF2=nB3[P@lE4,X(\&\annn%61!q9`ngu]ZCJsI5\Fp\=/m`U=TUYGh7b^^`)6ZJ%r]TO$[J--jU-^a9SoSK$RtQ(,o.\r\1D3Y'I^;L\8<*7,\^HmJ]TUS:O%V,%k5<#LM6!S7O/LQB5.MY+`fc8^g0`f+m^FoDBl.ao5M?6#6&f/0\D+PP9U>Ip@1[Is13IuqP16IE_4hu<!0Dm([t!j1OoV0R4W2f-%ce[L4b*uHW8F.H@-=]oBrENPMRqd!qH/i]/QX7cME?c+Hp;pUCA>m^_3'MUOq<qVVLH]u='!QVFb"NST7V)#j@+cdgau$?^/H3<.%/08)tr\@s$.t/?hY4j]fi].U6q'RXYP"fWdhK6$O=OqpK4*c,UJV%<*EJ]eDbG>)#fGa@1FE<.?Ri=/r&W)O^9W@,.i]]:S[<D$(%6XiFJb[Q57]t>FM7[MP4k-Y0/)A=eZYafll`;1+@?ni`a"nA%[-j\p:1tIaBVNHe<`D,U1Ua_in6-/p``\\"sWJA?.O4@WspQOnl%D$f+e`RS@Z+t=fc_Nd'@^b:%+*LJ4>$Kum!bsYh4R;pue>fbK$4.\/shbYjk<RK)`M&:T5!4^cVBY13l)$r!:7@,5!!_!@\#M*\q%FPIMU.:LE*D)jhi(sh*4?%"gRM=1dV=;&HlW59B;Hj&>B`I"bPeoqsI\I<ap6sESF)1uW6Pq*;qkDT3m1:`KI)/J>6?Mq_k3DS@l%*-X7fGEnT:(ao3V+rmFWEh(VH.'`fJh@'!?%i.AQ*,2WF=FC#02RGCJdZRdh$&u561^k+#2t8m-8:_SY[c#L[kDV(?M"pbJ,UfGM%B3_1M\aoXq6A@liI]u3JnaaEc#SO7`PpqB\hJ7Cnf"9'hoZ<80I.Elr8msF6_%M_IKVQYEoDW_9M,oB*Nuoq#fRMk"*c+dE.$&?@%b2]#S*hC!kgAU&C77/e6+<pXA.!quUL)XSlLT-)61bDZYA<p$J<u2K@?"53FAF0:Y]?u>`G_mYj6>$TJ>F?ofAneJ9X1h]W`apn7%p>G9BjQRpq`ou)kBm/A0ZFMrX:ro=b)J=jL=)p1k7'pU^EQVC8PnN-<F3\`g4F3I3KBWm`/0;m$?V9NKO^fISc+a5K-VG89kjcL0%)PY$QFC?J$ENB?pjZX1#VSH#/+pL+ETsZ6%dgt&>+!)EM$F0VMqu/sc/f[TDI4/O]B8mP+XprAg7iUS5m$1EZ:EEd\+shUcTaSc^%Q\"3>>8r#B$7`++.EUe6,\#j&T2t[Q4qAqo:kfCHHhmqZ@>I?Tg<ugkXE'K=%!So!fu'Nk,m8DlZ.foRDPfXcUu[R_q7Pq`PZT(@%\kYYrL8WKHQ^#gl&W3NO<D<&o-gd_2>,i!*UF2D6^e$&=\JFr6:Qi9\H(Z_+>T4cg-6F\k(5)Q'U08c;V>0ZeKD!82i\\Tr`02Dm%7dOY.Nla][D-dWO%@1L52!W6fagY-)=:QWNd@q8oTO[)`7dX_X$I>(m=t_i/G1mtLHY%]$k1*5;L9A%<XtoT.20?ePFHr97WM(iF%TM)r2@I+oDiX38![GV.%k_^nSimiY@f?b76cm>^ra/u$cY+Vi>4AH>kE<TXB>&`gH]&F&X<VuLJ)S4o8]!-q`@5W.bKb\^?&X!`A%k_^nS,-d'CK]N':\%<8JD`e7g^Coa!B(fB\,n7N=_^F8KM;-A&k":jCAnANkIH7\rr50mLEllKpH3m?%UZ@U$U2G-p=IrDn3$kVA%ii,?]V;o`6K.W)dVf8T!s+8(Q*bg+V]"%k1V_[MZm]Tr+8^PO)()9'X)0nf9b/YZ6YQ?cn/XbXDnrVLD3J'CslK5[+dELQX"]Y<Z%ahq"B&g#r>XbVRh@p?!&E]sl:e:qdVPZ3aW9`($M]<#P);%"%;]_FdThQ=*(2M%3ZbpoYfbI@:?*]O^5,$\9j&LhZdBX$:g/3^BW%3`nKJMgX+C`OHN-/G@1UONFWHO1@!A+\lr2\#3B;aE2*PBr`,/^Ha-,n(Tc/ca"ijP*)_A&3*ogLIj,,9,%r&4L)KgndG=f<.Q@\%pceG1c&)"6I'I'P7Lo>%F^RRPLL,+t3Ud31lE@nF;3U*7$TS8aMos@s+'=,knE3S[iGY5;JlDko./o+hpkIA<PU6Um-2em<Yph3$%6mcqd1!3l-=nSOW/A#M+9ShdPKoE[dlrP?pL0-S-lZSJkor.L#<ln@e_#Cl#[")".HZ%VZGeIA-&E*W"![k'sI&G/K+l(m\bN/*N%UQ4\>d8Xeg^tHmf`Jfe?aX?VWp#nbj4>#U$KZ>"qRZYHb\[!&ET8_k.4S^:@_g"BHN6J:Y@jH#XW0,9ElPkALaE#rOrlUG(U=a_G%N\nKDcK]C2Ed(VcCr2(RVrY%pgJPg'_oh!H.Ycq\-bgk*7!Wf5H]/_?VW'-#E&2*eII5?DGn`6_-C0n=+=[bsip]]p":?>S>T5Uo%U`k4ZK`*(_1.p#,hNH+1Zrg1Zh+/-Gh!F[;/8cFe`?R-RqTE41h&YXbIlG<D.he%Je+]#D5T(e>mH*ODRG8eWS!T0MOeJo%5!4J]%AVl4:V+_c\K-N.M(A.Vh3'm=NEC;-OOZKR-mf=#g+9E(hN)ZC4?^sKfECs)K\L`RRpSg4'PrBAoo>\rjbBJ;o;3SM5X;>LXP]\hV%_N7Mn*+l">cJ;f`bh:/.1:669%k\qkmV(";_oe:+'u)]/;MK<k3VK-B;=XGT`m!%-e^`cGOMiZ'LF7msEF&Q:WcGU.C0N#_ok<Ke%fu-H3[ETG!A7[7%%0'o9nE."AiNhMAO'N8tlMY3'Y(oqYd#!Xia0(1:/OO[9HFRKlhpJ2uO!O&M*`=Rl^)g$]ait?DUjBPD*][O=%pXo.X.\c]?B5Ta&E*7)cGk1(kE5A#JMGc%HWeX7C@QDIiLo!4#8]S\oZT"[dXE73Ji[)M<[UkksaAeJDGeAP(nFCl2Toth*-,rNk%emd\R?At(eT#Y(FN;*WZEabK3mikalnA@&RNsc&!6co]<@L4s:36FT#gB_V_@)A:D6&9dT948cr(BH=s-f6mhSdi0C]J%)]EB0?.%L0J"[-6K6Khnsqh3#eIE4j)N0H(5K!0J?'.j#dA^@[+5Q4mKXsA=O:_iA&56=2J@Lpa]s2]ksbl.ZIQ&5.R'%.mhu%"]ipB7Kq4M%<2>!=o8"-\1t^hgUji.2#Sj?8A?tE2XGYNYjK#,>jBYML.ZO$*Eg&tLS;]RDS20N]d#-?DYCS;3Ba$4;0M'#Q;b'P;Jp:B)R;ak'%b1mOrP[q\U;RfP`NEWG?8h""Q_</]A+/]f*!jPYnSFK517Z1K2>7*=-YC*-D3:KSTVL>OD3/K,LW&/p!.GQ%0<\EbLqK%TS_WP[p%ZX,a[@Z7n0E0K5&nZumBKB;4u-Jgmf,(PWgEaE99\d``3Mn`eIgqs:J@>hcqBBW_`aoQbmq+?AjU,#Y64[eT#b#(Q)3<[`,;%G,\%oL<_Xb9Z9'NT';dcTg40:X/W(0:)JSqchlpcVL1JgUtrR)p9m!CehBF*c8&3*keVu4R[Z)FQi2\6g?\dBR]m-]J*r!-T=I7EO[q?%:O\q=47`s5U:"*[lf+euT,bj+<9#94X"01U-[E[K+*3@r](b)`oYdQQ$9PAh/\K5oe<ubKhp-_r.s<GEYe)]L.dXUA4rrf]3kK`>%s-ZrH24phd9&.I")j*_P-"+DhpITV[CU2S%='T(p<1V8M<nL,)>P6cC[H?>P_jj;hW>Y#0o6Yq?h.]`kgU*//l1UUG:H=Wu5/*H:%Q`jS<'m=L'C'bFEhWI\G[<:8`7Gqn6BmF,Qn<^/o]3ffs*63M'5I7$upBtkIrk>VB?=LjlPtlfZ<1UDZ'.[dQ%M!GEFW.5LDA;3f%%o'T/Urb9kg[jA1Om)bg&JL]*97*7C-C,t(/BV8p't8jO0.B!GMAF_ZP##8eb-*`dkA%)fj>*#X;^i[H*I<oSfdIiTp?YZ7e;:7%%iH]jH>Tu*`$9.r1Eb4q\h"t,1=*N;[L>Fda)X(aJ"i;Qs7MSPN+'3n_#i??Q/=Ddk3n=IVWCZK1X6E6s@3/BBQW6ZpJ_22Idq*Bu%o'"VGH2R6CeT;>(HlW/'44M?4<DAgVf*ASN8#rL;pP+cb<n!&$OWRCo(ItCQdZoVlO'#,C'k`B9Ja/Atl*>'gnoK/tXes8s$o;pN%*`u,Q8_b?9dM9Dr@E`JtXBI[Y.j)0f/o+#jrUNM0FBQ"nED,ONWp-gJdm9f(dAlH:n0^-<@oh&iR=jOknE*g$AIUN0^2h_<\mgIY%<]+/`/_rc:2U!ip!jMu1dq'PpjQ=7=>tl+Q?k=.`+?&d%6Np5lQB!inUK5iTkJ0<*2-nc5,*O+TRP(XgN,Qdce7uQGkIFJ1OrgBe%/cuq[q7"`3Jtn!FbC@Fg\CG\(->E*9^0qhT%<hg(ju0gX#LN8"qq80;-0!ncZ&)r"=%X8mQ*.gFLuq*9nfusl\!h;@h>$^kjP<n(%7A&SQk/1osc*ddp$DGC`Yepm-E[7mBcb5)lXElM,W)5rKA4bI`b<:NM@S8cL%^X0u_J/6$ZO$q:Yc.8Wf55&Tbg7FE$'TB&I.K+r%&i0$=b!bAu5"7G0a_U=o4&q/4ncrNC(V<tUbk^a1fA*4jY8g_:2pOM$'D]c'(Yt(^U!trDH.'"&9PNR'mP6#Eac#RVX@PlhF#TVP%b@Mh4?ZVQ8qc<.SaBUf5S16f5`UC@KgO$:gMm\g/ZXn)9gutW;Xirr<QKN.h<%^Y/5%@U=CWA6-mb8V"R:*V).-Xg!/#4+ApGYH@%U;ATKM51!^I?EO@Ed+>A(smV@l\QhS;CfCglgQ6,:NUh[<m_@:(IP`:rS\Qi4_?V%d:6cU*K@5hZ7@$;AA3;:iI#k],5a4a35mb_%i@*\e(6%i%opkW=R0RdUO&IUAUXo4%bUsrQjMKVaSTqHE2WGOkeFpOW9:(,Y+9lU,b?%0=n7"a&-1;\.kcS/erbaA'K/2c,f:j7"%ZI\0%KacHhjH?C9-_?epI9cK+lJfsNpRT@0,\3jo]><ubVedMD+n,0.`jhp)RB"$+rcFk)#^6]RhGQJeBf1tCTR+oA*imd@MT=OQ%]Jr(RL;U<n$mC7^<6-c[KGV)K6E6Vjp<O:<P`<JZ474/56lt-&=-sRsRLP&.E&YYIeIT1K/m8#Fi+p^rDn$b\VS(=/-i^'V8#b\,%I$D4<OuM0]M2aatL:cMpYK8lo<m09;=8&cY85^mZ?1b@QXR(%g1#>!L_+mYQ_FD`hZ7U,*CKm!8AO6TTY0.'qEI*;\`tC&K)>]pT%)<ZRu/<5_=30-m<Mc"L-SJ&Zhn8\$V$Wg0C1oO)>?C*ToI=(f5HG68\+(rKP%q`^FI@=1Za)]@jE^4p(/M:0DjMR33A,80^gRa7g%O,s!LEstKTqtP0S35g]&pC[<q'RGdB`"\&hU!3"S^0i#,0Z9-;\I'RqPs8t"2X7]7@G%MK(7b-MVGdEH8VuaS,O`5]IO![Pgc%)!%\aD2i*c'8\\4*6$9gqG&_]W!o`jJZ>^70%W)^^ib1$[^ar,0?+f=9h']X5i)Y'M]tQs'3E\"n$mGR%*e^Y3`"[$ERV:hJ9rFLu>b%N0NP>>B<Ru5;c6nD1:4(^0'94hS$#71cFX^NQ0!/*n!$/mK1opEueVZMCp4C@6;38rg[7)pMAi1=?.\4McfB(S!Cl>.E1T2(8%25%c7?c<IkAl,S*4BW>+%[m<dsFCDmFYnS3*_$I(/VmB2W@lX:\C`O&q0d0:6jnk!pamhSZe-fGdL&.8?ke0S$9d^\4;^eG`1fjd)cd%n%\2a7<ja:T&)lm%$iH^/%Am23r*#[q0/$*DAZ?L2*:9`AaPa1IBqc0FceUs];Q#(c,Z3Y9U=WXI,</:eD#gc?C78T9a[eG-E\+L%Ih*rU-*(ZJ^Sdq)=^Um_op,>9k7=D];NpuQL=$kmDY*igFn\gCSG5NR<d@QrjC7uQEedFOO*-@`DCS=tKI">3kKfMg8t>A!U..b/%afi.1=h5-SRH=&&Ye7EcRp(S8Oq),[UnEu<*W'<<2b-NC.]>t_:95A3.W&:BAt#1ZhF2sp]0bKs@=KYK,@qB$m&ud5/#+Y1fW?O3%98]>gT^H]BSlWBJ7C0@a[q<:7oqXaA\@AP_;W?tPkq:SR*U1k6Dd-]m?cMA;1Ys'Pp(T.iZ)r]VS,7rX&e=E?X[bA4Tri`gBRK1$%(<<g()BU2oQT28lp0R&TM(ESEpt3Ib;n?:OW7QX;ipVaTq3%A$ZqMa)S/Il.eSK#A^Ne(9--Vcss#<2_+rHjM2W,4GhT`p-\VSuV%caV,TWo,16q(K?0&[E?pjks;[IPXACJREj">8N%H,GC0GZ!F"B7k5kVq?_Koj3En;V1@H\hfCJLNRb8GpfK@2B1X'`D<JXrTS,0D%>uDm%3EQpK@j@9@`oVW:;U.Btl,k+5%$\chqq?#8UASEp2*V2V?[f6'Zh<=#jkS!HK+5Nl\,<i0a+RRo-!OkE/H:m*0d()i%[JR\%cF49`%:EGUN*6CP_c!HP^nURbj:3p8NHtp"Fi5cFZ8I/)nrFYa/mAE[?sAqq!\@OX=R$[.*12u*;6QWnZpYX:fc%X]<AsYQJE:RJ%EksKaCL@Kb!(ZUBo1n2#CB+SS6Ra9.XJ^h[b#`s8gLFO32d-o5ge7GmRFXX[U;jm20B5O1J&A+1flHGa0BK5CPD>3>.3DcB\,l'U%H7<5#D-;pF.:;NAPn1Bh0<q=$lV%.T1n#"s>cKV?\CWB=6e8AgA%`g2j'KJTEoG$Jf.RA<l;k[?GW-?)om:qlD4,bLL?9pJb.W8C%\,)A=2q3q9rQ;hnl='G`L#n,EmtQ/H]mdpLMl>c_N-kM\%JHk3U2fVo95Z\;X']I4BoIE;MY!5c_ZRKHme&*e>%Qi9me(pc)aK/8%lW:_BV8XL'Y?t+F=7fPbLYqE!S8jj#P;m1M;)IrV:jdrJ4Nh%PI]m*ZD-P)(&#r5@H50$)2c,dQf<<iW%4n?2hWktC48W'ndI6+B%KUVY?n+A3FeaF[UnWc=8afcR"m9[QE1bc('I>iOOe:C6;XaZBNhM7Dp'\qsibI`#7]mbZ*Oc0$[)=:bFN6oFIS1>]A?GGK(r>qjd%X]`="WQ5t7KC8C_53PVhMN2tc?h(7I&%I[=KM-oTmc/Z`><E,!qE;uLHp`ng'%IudHi6Rf4_/0Z53Q=fN4Oec.n(\h4Qp+dB[1Yp%<kgAidRMI,?qPm$Hi4;tRiB<CO)hF2Yo>jKI=1)4eK)8_mh+2+qc:K%mc,8:Qd0o(6i(-(Ofm\:%[DF:c3*M-/&'Q;T^m)uHi5!:%a%G1R=)@#P2"n/#r=\EgGh(ie[41EJ^G02GA)-C:2bM3$2jCu,Dck9*j4rs%4:9,n?KK5[8$%!Y\^bVOGGchA0QsX,=BUosnb`[j%B_V@7R/p/:p,MgC'n[.nME]%nIKPC;7W[#HKe$*nPePaf[(,5-p\GU@9P1q_Ef?Hbdr+]XINrD7(>S4WC`#Y&fRrVb.lIf7-])?i%l^%]GFfSm+aiLFTqA#XT<+[37?GGKIi6:K?1%+_XKc!ku$pRB7GD0An!D^;=G5Q^cMNpQ7MK@R"rN_^+^/\h-&>*Ok.Tj"?Kqap$%EbO'pp90bqJ_eIBegY4a`;=f4@PX_o`iqj45)HQCgeBWd`I`AS+UFD@"=6lN1tWiC6r=IQ1&#tmI\O85qhf0jr99m'I]qK`HKu4P%5J(j"CGRJ:bR^oDFk^'crRtQFgp^m>g7H'`p3HM`jMYqcIU^"dG'WZ>S$OkuoO2KUk3DYRJ%#=AY3$_ks#G5*0(se/\GC[DX"q$5%54\Z)00=[?+6dur5E:3+\\(,_?@I%srcEL9me!lk3</lorr)]UE:N1R]>[Q!qV@R7\_1lPS=Z,7ZocGeg@VSHo:Pa&h_4haYNAmc%9],2P(GiOih<s">iP`UbD;*0dZ17[:n`dUW6>L=OX'5,NLShLCeN)!b?Q]42Ft_H^h>:Q[Zb>%gK/7=k6<.3lrn1J&mN$ZZ8g_(7%:"t!_Sp#HF?VY=YYM0XG73fJQ03hkqg?W[+C9I"aT<CID&$LMJHN[t?rk-J[f!TB9rApPLdsZ6%*)(`>fN[F-<b=,]HN1ZB^$oRp%j5IB>oQk$0n7_^\m.[:2kEc//Q*WFu%OEr[frDU[:OWs[/2hj=c/%)Ap[[W*$96q+C3eWpq-q2eTlp$VjuO8^KfPjdXW-6M6L>G?%_jW[!nt]bt>9>d&]RR3A?e?V1j'-0>)dC>-$Yk+_o#6[MG6dFqcM)r[hgW;joV^SQ1qp\og>SS@)^gPJ_Us6ak3DYq3W(bD\@FG;%hjiHSh:9!KXZUB([[)%YkB?1hlAlI)q05mq:3S=V[,ol2)Kbm61*UIXRM=oUcBYq`4B^iU"5,jqbKc3XCg6N/OWa@l6Q]AFq'.Wc%gHY?#789?Dd"q'8rnErlp?[.tFT1m'p>ancT.cf(:NU=,HdRO"Bt)t)?S"U[BZutU^0$8AENEMHAd2VmUL3tIraYGO(AX[_^&'>T%iaA@%Wc.?%[K^T,Oj;_=lKA'KqoB#MkZ;sY)VULB9!Ag_'J/)(43kQkO+rUAp2+Cqp7"M8Ed"A4n?Fk_37C8FF#uM-S%<]&G8_=]%NQ//]f?\YIo1(\)q5;P"].)J)8TSnIe^9XRhnE=SDiK$TjW^)a?!V'ik,1Ae\3;)g[^G2BIs^]bHTrMsa[%p6H^G-.2;r]+Yfhl3%'8$eebD=&NO^[qEWSXu#j/60qp"2<-GJ@J.$"(r,3gpm^o#YNSrMHpY>Mo>IiHn+/`r,eS<<.[_&[F,LGFl]!r#g*!Cjt*gK`O*X%?eakLlXN<\FoV9,MSL08o<$K+%YSGP<6[VARu%E$!IpCH!0nE;!Q=0P1]$Fjb88@8]/>lUS+j&&f9l[_EIY-c`KrOC<02p-kA?;#%Hc\C^33ZiXpOA!iQg2B&*.@b5_tV?4>OOfE!0ghi::%(KnO8pp,:7h\(PMNeP=HCL%I`Ei@tT'!9<I02m9?2RZbPr9RC3X^B-KHf%*3Xb8%$$E[pnF]tn,m%]9=)C!_8l.E#5A#-(OIgXYY4kOi2jV\E66Ne[lofS1kbaTVt'_#r;rk=ou?[cD)3UO5^\MO#_fjp=o5i;%)V]_G#e[hX&MI0Wgp8-=*&_9eS-l<Nk"4nFDSLsN&K&1tUhRMh0g)&[S]H5`dPfc\T;2_Lp<i\aXQEaROnn2@9:&k>!C4cUCZ>-Y%p!(LHIq".9RbK/:=4amG_=5+D&2gMEC.UcNB>O\Vp8#Bl(n`YUn`/U)@#3":Lc*4C9<=j)6X*ohf$#L;5O1^5RnF=&@`rd2RF:Qi%de:(mC,1o0[u=B0rH4!%1STsYlBc]0(dHo2(D"E(R1.sb!?F.V02CO"o!<rXrEB!O2:$l@,.oUt`a7I2mPt2<$amF,mn6JT%X>6R%5)&,sr;,F2$:k5V]NSe615!`no\1>F>Op3'g!F@"BX"2KS^E?Ul],=T/[Yn'qu"0dq/6j\%`!s6+n>d_@Qi*Mi>XU[Hrt'eI0?k`%*-Tt+htk!2`@c[eHUE2:hkGq:5!I%T`,[IS&np2/8JWN"H0jJ6+5_\oSf?W"F(`s?^Z5h8!GZ2CGSPKk/<."@_Fo32g-`>H:OnVc%4u_1RZlEmE2e)`Onfa;A`20;n,7YJBGGlSd0+@ZU`I6h997$SnV)GkpKMr2JX1,>"2%jge>[E4;lIL?/R/%L2!o$uXj*^dbEr;](%Qt7`'I;'l(Ynm?V+)FLVN=o.W07'A8(=p7%WtVOrr.NJ2KZY-\_WY;m`9&`?-]II>KX6p;'1V^/J<s.3K[II9[Za5R'1V^/dP^L2%rIiS3"K(5lrIiS3"S,khp(L>1K!FbS;"m@O+0j"]T?Qh8I.G"s]XSN7aO-RD6nChM:LHFlF4tYaY0M2d?ifZ=U*St6hJ*Pr]/.bI%J^\B583]j1otV65I517lEE7]dX@':mm[rl!?[h@nj_4[7Bk<DQLH5<TlXeWJLUm-X?nX4seIR%IbU*O-Ct5'u5kuqP*LF"AqKt$G%esbA?04M?*]K^%FHobS4;J1,r=gQHJeq=i,>CGo;h1k4#]eV7(rtWG;`/H&ldC52"4L/CE^/i8LqYs^#Ga`,D4i=P)bAZjQgYLK;%bFb-1eYUF;b4>D3XrlP-FIM$/qd'*frat?krhb+uYHCikf8gi^]:Q^h54;a`WB6444[e@_MFaa$TpZ]]I#9Fd2E$'[gK-I8DkFKs%IqU41alq`s\apfg`OD,#M8e#GB+m(<I;`TZfC'r3Cl52=:1YV[/KVlTU',+;C9uaP\DLJ;[JsZVDg11hoJbDD\$+,drbR$u_D5KU%YubNqf+rjahY;P-*4^DLes>O[Gtm'`p0clW=D._Z&@+HTQ#X(Xd=3o+s6RP<2VqroS$\OH9lG;dC&Z'Z[(`&4Ho$%%Z$9S>^_^c"%[<;(M@d2F`SV`%b;dE52(V%e^/&J<k-s.eQn#8X%oCOkIe&)[%5Xh&oK_WknEG$R=E](rA4\`r[9jcB3lHA1a[TfYNlEB+4"iW3`%0>]IAEFfWqfF]3'4BXNE\ZYnHe(rP@Wn)>sI6Sk73"(C$8FXH;j*C,_UIKJGI$NWHn-e7!TBj<0YP#^Jh_]WUhY-PpYUqp-G%6BD%TNV&jaP>O^F[Q6GaOU.(g3K:>naCi$iiUKJ8\n3La28_PfVb7Z5]'4rgC#:Dg)E_&nGPM1qX/\M3i,TTQOuD`U'^fme&Pr>G!V4r%I/)A7kTg60e?^S6;U>PhEfa)jCSAr^AmpSs6kJ*XDEW?Po(.%u\G9saqOR-;E6Rr$H7BXL9a/R7q`_.O[LnOe24g<hPTDOba7+oV%0>0<Y\(uEdgO?WBHguJMERW$"4V6T@$s#?Q)$s!]?_:'slDeD)[bcn)f@ar*S4cJaSfKI7Z9S5bl"Bn*oCNhJIF00Mhi(Qbf-"=h%[7pA=oQU4L-nCT(Yl0)&9<p^*qjGO1Qh[g4]YF+%mWCGB&*/UWqrK1T1*DJDeZIQFlh5oYg"GOY*.;:agq:C6@he"#.:`"f<_Ke>%0fuc(cC?<%G4,d0a3K9GEIDkq@lqWLc^+hC[DjRkeCLSYjSE@ocd7a2Fr@p&S:06cnfT%dj<"Os8AqJCBt99P`+F(3.foCIn2BF]%kcW,4XY5u..>iPdg8met_UmYtPsh^>mMagAb@_hI/Hn]/$gL7skW@8.=2duN8rfL9%Z=RI3SV[IYU"u-d2,h=MpIHm/s,6@6(dc$%E?%J1TC%&_"J-P#cE'Fh#k*n''b'S[-98m?g#4"_DlF#[`04!:b@H9Biq^^@+@:7AMNCsgLI4CEk3hE%6+"So*Q;BQBT$:Nbh"tJ%2<Jg8>YsW(3<;?%d.FtcC].C4D-)pZ^n3cGX^6["=8)Y]U+R?kkYi=>Tim8I/p#"gFs%k$"_\&oY+RgU?J-SCi`JSAMcf((6:56f%acJe*a%-=L<dMUQG_eYElfl[Ki375C073Ai_DkMp"?0G*AL=^#N[lMGkk4lC(Z-Z$9(4A,hTf76[6Gpu8]t@E8?<sIpF?i-RuPE/%7p&,(?Z@u]g9J'eO]fj/V4>DhfnSQ4Uke`6T`$:[it2*Nm$Rn/X:`A+CX!=OFnVkTW?5bCjK>c3-Kd^YdrmX1c3@5'-JtX^+,7l4%`PmJ$?O$Y8!Q0.bBoqL*ejq,Jfe?$Xr]<jF5[+/69lfr<)mt1%8KP/4s,AA9]T^;22k/mD99'>WLaICH_Yj:)Ege::/,m#GjIe4_%ap09h7Yn@U8%BoUElI'ccr"\;KA?+2PXdp[>o\<T)i=EOH^(!`aR/que]LgBd]TaFDV\Ve6U@!*)/;0Hp[@Rt_*6[gs1H##DuJ/Q%<qNEi:S[sK[pe#kf>mp!Wf>$sZcZP5i)Sh0YBIDTs8:cd2m&_>q<IrrA`e)[^"_GW4RZX#DHkqHW[hcZphKhRGI+kYQ&#@IS,D4/%hs8uF5C9E&c<$W=k@gRC.1JPUk7O.DV8]'-[-B^Np[MV_j)mekqbC.lgU*9XB$h.FXj.ri+1urKYZ5g^Z[18kkCnDuWb?,Xo\gng%n<3eG9hkYf>1H^)cX4*F"ibspd;>qeqt+]!fA4#Jf[UpUF6f]@fk>HlY&8Mbh=g-*D0(nB2gifH-GOGcQA$[#mWu<=4g4(0<d,S=%Tglr&]@'KYHQJ/49hsNLBeD6q[cO5TY?MKb8WQcEV-0[SVb96ad,``"MjBT6ms4"b2XIj:o'U@e+FDKrCKD%M>P(Xtna#cBUAF;M%]='uX0FN37I`>2-s1;a-3A0cVQ:2p8)/+KT[V3Fg0[1k^TLg`mTI1^^]s$2=TPM!<p?gVCN^gACR^U3)EBJgG!#2Cm+1?1$m(O;(%7j:(52<q@'g-QmQjq2D<QQTbIZ4"Q.X=AWqf+!^!b]7FD`+L]Rc_IV3o\4A5g)ZV==/2ZeJA\^mP>-t^M&_A^9[,Dm7B:bN\'Q4g%%RMojLWJ)C'bL%!%P>YmV<GWh(su&%,DR2E\tb`A2`RD&j"\`XqjJaHY349&/;K&1,SJ\q3\?;fZg>85)%QBq:!^"$kW,A)'0N!.%F\aAV@9A!JS6<<YPI=*i213`6(7k/PAX[c!=.N#Y8!*=!gTBb0<AtqM**S0_go=-qU?fHaC,.opW4GA#NosFPLDi!>Y7`*;f.hMg%^.f%>#,3D[N&GJ#`b7\;,Jl/@HB(d'TLV-IO6BX#Z=od=mF1SBpp:predOB<*k%`jYf,W?QDi-2)OaIV[CF%pHsW?*dI%:Se7<eh%O(OT7OJs7m+#</J9B8H=gV+%>enK3:8'D"j^qdPI&8_th#`M.mTHr4t/VObsH)AXiJsf-iK-j6DI+%;Gmbe\S,#FP!n>=M9d/tF5%A87-7i=XtF-S.pCLq5>QFNYeqTKfBk`0g1U!CSt*$n\*u9t2CU2$rR?Y_IE[YQh?8BYZDYO,'hV7MRK@H\<b?j1&*PWA[L&B]H70%pf5@tBc@djOCJt&co8[3CGd[]M]cpN5nXpZepIi2jsP\L3lqjMS(PQp?G*l3H[=3e"</I+_@493VZBNLB#KM4nS.e?[ErQU<`esN%&Cb?",<kg,!gg%4'Y:LD<M(s[)B]V5&f\8A0X+;mhEZ]W?m,<(>>-5/Ld.M>@ouFM/@qcG,M>d#?r0RN+0F2GR<Mp$8:T,`O$k=*%+nZ#1#RWur`3$C)9.,6%_H[?+Qpcg"l;_#Gl^C(#mDIG5C5o18ogrHjlTUM+bou9g=<At,(NQKE'MU?;js$X5)Q(\0N_.=?*M6rO%Yeh;ZU_.R&7L=^#\JfUr=KWS]U^u\+&bm7_J_W1iAoGMB6+\MA[=MB9JIDPbBk%oEfRsP$l![83?3(eOO?c#%UMa,+ru?h(O-HV:%F5-=k,6lW5rgN!]1`T%:m#/)DMV/&2:`%it#::R16be&u^^c1mH#^Wgm/]XD(d>`0?oC-9&J$l_BZP]tJEF\X*f6s&nH8QU8/,k5%FD*.faP(3##ER:Q`0k"$6_hbOPAs9LlXBib%"kYgcVSR*no?QpQ_n=;^ecppSHT,"BL!\J[DW@OK)t:i<$L:OH4tMe]Fj:@)q7.d%\8D=C&-B<'qRcog8]_5rl);X9q.."fC,V5!ZmFG%B'S:u@WEt1iuX%Gi5O3%FF5igI)k6eL]g9:JosU/!=eZA6lnMY\[K`l(1Dd6%[gX4=+*b"!,!=QhEPBP.?qLRe$sQQ+Ok9c^'2c+6nfVrYXX"Ze)g2rF<Prl\cEk11>uTfr.)c3If-7)3@"3\0>UFRq!a1-Z#"n'H%*2j_:A)2].-:&&ENokm6Trh<dM)kb?C*5'8:pLC12%[tpfQ]g%i$97tnNfsFKU@@b#rJRb(D_OTLX<u$_FDlTog&Z!JSrrtUJI+F%V?-dY2*4ctLF-1fM%$70gSAQ!+2hHY;Bc[AU+jF4Y3n[.q4@&\ZLadVF>,4J$jHhN.s5#,;*:Lg(k@YtD=eYW0C]/12FoL,%#Di1%cK[Zek(n:JHQlm8qnD^N4HeD&OV?Ji(eKYe"6(1d:G&eYkqNj'`:1:YK`i_BM+t)c,7ui5!Lcr>HmS!<M1JZqKF+1uPR'gTQ'8L"%Fb>6QZ8g2P-DZ0E(>-fr9LiX0cP_J),M3AqEQDGT/Wh07"A?4GQElNfGR>oad2[-=TL,]tFtIAM;VnRQeh'.l+oWLjFMMGtg7ZkV%TU)1Y#Zi3`9e=`t;3@TH]g;]Q&m-Afb=%JgN!S=$-`2ht"Ke*77#IJ'0T5Vh-<Ws,fKm(TSY]P,M#*j2Td^s:''X\YV@Ah9=j'D;%-7'P&55RGXJR+\.(68X5iH\kd9+*Qb)jt5e1$Td@"5>^<)%IS<9\;=CatP!J+[Kg\(0Q"6!pur.FJSn]j+JM;n1MmEdO>62T1qp^%$X;8H,%/;&AP3P9AF.d<Cdj!-8.+*&eJo^cKZ%sA<j9<u$@[f**&a14dF?+kFc.=d1@fgc#LJ#;U]t2X!qa"6+m(MY?!&Sf![d-R%KrLJ,!mh%R.%2E\5kY@XA&6_"A9;&>Pa"=&7F,L+Su@uF,Nll:TQ[9Qp=XcO`O!$B-3VM/n,O&Ya/ide3Wnh!%OYBSNpo;!bHPC,%\>L+.*@0HD/d*0WH\(5^@Rr/9!9,W<7R3*#CR$`F:NTC\"cA7k"uI"BJ.>.95U!,h_)d2KE]&hNGXmMqch^(VYkT%+)\+*L7KO+3%k^l;K="uk:60'Jf`<sHe0:H][P"u-^:RVPm`<NY8i$gaV5*PZ[$D$sK1o/GuW=NDJ#,/f3Ue=ru=WY:I*(N)fhLVQ2D,#\KiIF-a%003n[':"[fA?gkJFOn"@'cp"WSHQLeF$d9H_doJ.R:<AS6GlX`NbaI0`m6rE>Cf,]>!NY#7!*>9FI5+_*FK96b@@?KAI5NW!-,tn%J<NRmW,1(+Z'%r)_-.sSd:ACd,=?8[#Ds8D$IaOV*#K6?#%@tKWBA7Gf7PBb=p.IFJPG05Qe3792kBKaNZ"(d#0dK,n&+c?1mhf]%5s$$ej'f!W,UI8-B+04J*<TaPL6fe:N%X,0o#3cOTT)OM#cA>BfQi0)7OFg_B@p0+TkW16$Z&\l6l>!"kTDg<A?r+T.!le\jIK<X%L9Pqh#%[.cP<pP\CV3f>#Y#5/Z-&b/Fgd-T'Db(O]l&O!L/'4Mls2:uaW$/>%W9]P5T$@'&;*/?&C@ZnWosJ5J0'=+[mYg.:rnZ;%73I=)(UaP8(1a/U'_@#uiI@=J!.[#l/^n7]Ah=IGW"DJoV>u>NTF"-(V]ornWAYa)cu]L0!^qmlTp`i8E_UPn?ig?<6k17H63OCB%o[;ZNOd(Qk?uZXfP%`XR'!:aMn2EpTOpc"T+4UoAS5ANT3X=:g(&rk,J16J\A485YR=bUn(Z@3?I5r=.Ztj]GN=Z,TLnbm0g\.#[%1^(#/5]C9bcr?g=M+\;$EW?D5gjQCdEN0IfU3pcJ/_;<X^]Gg);2)Yn[0<VfnY#Z@P.q$?9a62gRK9VEJj'1*PJe#&_up6G#U2Qn%&b8$l/dfG>J8GGHOHbpDLStaK(d.5L:!.sI)AeI,P`s#@4U<Ki!$(^F)"K5@W(k9b0%IIcT]SVX:lB%n/*[ENn/NEM&>KQ`'<7Y4%9X<I5(mVpH-ac#o;/F)_'KM"cAo3248a$iW*D7S-E,)>2)]X)'$klQL$U4no+C8YNkf,DE1GBfR!=*H"$0OS=_t$kQ`'d^m`[,cp%_m5$-5g3]R31#F/S5ntX]@ph*%6Qe:C)hIr6I^U3,:R+Y=I?,Hd/&d#*qD-GLHVI`5S5p,!F\[J'DrJ5\P_k3&@#Wt&6_d$f\hIQ%]$7b6Hs;:BFBA2!Tauu?V;9P;et)!.(BCj2']?fmn24f74WkTqTt"f5dhn-VUZQN3a-F.S2)q`A8!GhR<[X*[Js1bQ"j(g-p&Y,8%U%=-43IF?D[!gPfTTG.pL^ORmlbIi)n'Pdh?RSthi&8LRB]'1<K+p/c(P4[U.`W2\-Tf+t@0S7r[."3n!TJkVJ@K#lc:0bnJcRbC%3SOW^!;)Xd!!>?#&4J:63B#PW[\Nc>,aEse#P:Sg*m:aV$5AB:Con*GkWU"F!eHpFV24RaOMjF(0a(qb5aR"a=H0q3&(j.oftD?I%&L7'efkfb00FLS*ktEVg[^&":`.B+\9i9c)Qu&DN=HXRB\t^W0#F%V;_1D]Xg()bViKs`)j@=lCJ!d_)4kS*_Nm/UK_ClH#$q#8)%KGpe!Q;4mWER`_:/;\3WJ$;,R<c+-/^9@XM2SO)!1.Z&pg!Ngt>=WYM@;cpf80AdR(60&e.<;9(^Cr-N()&OA;"+S^8-f'jBil*A%1H%8p>XLVI;L&I7(l<Y282tPoi;nRt*BY>)(b?T`5hIQ,:M_\UWhYDDF3_e<c7s<lQluptnVJJWi:c,0Ke<O4+L5ECk_PZfdKV?=%qUGXH0Y"*meMImC%Nc/s`2hGH+g]&ka%M1%7mN9Z&GT^=(iZ]5"/>3IgRofs=W*mSEdX2W0H$qpA9(UcNP.^n;@r&4e71D4S`Qi,%^@&f]Ja^d?7F]rN4i3b6UF-S40mF0LS2c3`XB1<gWYqIN)Scm=6uhU%pXp0u,n34>8dGfe<a]806Cun:$7:Y?RBf=CetHrd,DV]F%<8<<0#L\CpNAq,ug;3at`,J#!BL"D96`i$NK^ou\2;!U*8N>KXBY%dm@N64m8[8P9Ld??-Lk/qJ>g&RE9,n.?o6k>7Vh0P^k[SEh%)$[QiCl&[8&:18U@"_nl&#Qen%E`sV%G9\Qnqp`HL>g,'3;fKIm$VVH$FI=Ie0N+DJ.9lff^*`!ng+gbEt]@qkD)5^U*L319[>'r%W?EZ#L1Hm^pc6uB3#N&cd2HLl=gUR.[UV$3adWqsQbDDt8NQS%_\Q'#K&>aV5oVE$+s#!o7Il>30*r"fO$!T$g/&@_;]n\R=Z@YD%WemQoS-'<jE2I/:QjjD<'=*?UmW.qe66u`kfFFbg)PZO:[,EQfjUt`.%B70&L&)5Ti5j0)Z_t$eQiMRP*,ccN]Gf'_*-Rc6#sd,;%"@[o930j!#Ygf?sidh-7I7.2a^m#0U@75_AFGV1C\MfLcM=!Bt$+>Qt75k74OA!I2C1/cT#ZJ3d69.Sf1GX-aUXN'Z\WR.MM?cSc%SZ*:g2BZdCYK00E,%BR:+]LY?YCUG.3X9]*iCq4tV1jPEJ0Y#9Jk$*6eJcB,Xl?RD=r>1/SZ%+#$_`3'=N#5c$%i?BE6^GQ$Yn*u%UDlDc;[C<M3`?&e"!3-`bF'[^J.3!qo4\k*$]k?8/@HEU&;#Q9-u59%K-u7/;[FP!XB;WUXu2eA=0Mam6PH5UCQZ"-C5'":Zi]MN%nYs?(+b<@>##85/^g2=i38KDfE""ZB&JX1q!/ouNYm>'f>RLmi;M.sC3<2GaQae60GtYsVd5_?GkY^tn+SCA[R";c9k:"kq,?S$r%YQZ'B#^Y%rW6''(/I43N&r.C4&I:Db%Pd*,I.$+IAYD)pdnSd<gU5ND=`H6g+WQ8IEO%BRo(^9/,*S]tA%S0?kub;:0FMp.5k9.p%jI2*b50He,Z5O?%1m>f_n691bq;7OdU%*NOE-V5\<@oLPFa:if6UYNTQC!Uu,WJ=s(j7]\pcM$=M4i@,3RpO3k^8[KEZNeDVQq3s%DJC't)W<0+b!6lnoC.:7J$P&mWeh,cBL:A!S8b,m.`+3H'n_SI,\RP6!2p.S]<(Vn).skbAD5*+3Cs:Jm;pd/"Hea1/*&#?,qrY=%T;Kos=>4\rk9<sg8d(G*!)%A8@1k\4HCV/]%"i3"+Cg!k-_"C<Rm%q.)@RIa"BM1/C93C[m-sNkN\piG>.;IMY4dG9\aN%6f7o@/%m*;@[@O8`an,ur"Lt.1gj:R"X2fK,j0L!G/e\iS'fd1IlgfMp$I+[`K=F^00+<@]3#]$>*hcU!N<"qJ9B[7%+Vdf?;@K!:cJ*Mh4%I>j85fT8.W8=`pp*GqS_5gkE5)+Q-liCqZI'(dFhVmLB-2Z>L;KTm:8j_CS3P-i]$jk?O/T<sN@iCKg$XgC`ejg_/C]<hs5jX@"^%agB6ZiL&bQ^'Q/Y*8e7NQ#a8fI#e[H-1/W]GWKPg..&g%GueYZ/+'*CH?(Ha0C9FM*CiQQQI>XM1';!(`,B9\_Vl1q]P-i/k7D^n%TH<E!529ZQ0S8(3Z,L^eiGeu8_MEh]QA,rdC:8+F4NA+QWs-;Q@4>rB[q[7MIk8tM/GX%H.:bY>>\MM.>T2RHBoO@iHueP1qPhU5%n_#,?U!MH.o-+NN22X:*kPT!2N2*]_LV,':mD3UZ&1R;Q')!m'OJ=(E%33H$[LJF`FD22@P^me,%0rd15oX!42A;a?i"Vl=Ob+?l%JYLJq0BjsC"1#'19fRJfM[eFuK'2I(9o09U1"-CSL+[b.Q4-/RS)#NjDq2_mSP83%<&h]$S-Ed:U.dI3S\RIc(,l*l9M9CPCO?1r%$g$Dg^ljHo3:Je'<1I#5O#]KZ"\W(]q*Gu\VAN6O8nf]M9/'i(U;hI9%S'og3R#PFI55JPO*,bZdtDpq&^W>]pRI"JoE(r5'FUFK%jE*+N0e:+?`0gk7/De!t"e>g4'>55T2/jQ(-r=P6gD$g/HoP0EkdDoe/8n"V9''j(eds(Snj483q('pZEl0kL$R#\6TgD%IStHHJ%"YBkc%eq:$-J6t)FcCB#SWjj'47A]ojK$<pR/Scj^^RXq/k1N_92HmoJP[hA+d4U>Mc<SQ30J^+p+?S<J/hm_D(A(5]`F8J9&ZGf%@BffoEmOq1%D*7pko(/='IoEukVnd.25Jfk0mn9V)9Y]lk/V.519g,]N/42Y-t6"l$kbON"NERGH9N2cBL8L*3"ir61';ZD_*bG(%@-n+`Zp:6,<ob\,H_N=S7(A]\)'"]'>_]A"*+.YD"P9=5)f156"@H8k1/[s.J5pkuK8:>g`,:d_Uo:Nc3?50?@5r'Ij]W+\#k9G,%Y9<]Xn2:AM"%3S&2;qUSZ9/mPVCAFD@c3Wp4<e2')(587ZCr[cTUZ(oUl_NE?kW!r)f?:.!-<l>=\'`EJ(@T-((ZFu#oZ&n%Iq7p%9P9d1<MH2&FtD*&J!rfgD+J\KK3'X6'(#$B7@HiI5Ug[Ec*ET&BR'^1!W;F*R5U0oKqq*rP7Rm)$UI`=&/Yk:/rDWASDo&%No*rH%_27;s#2(`4"q?iJUe0ccTMO5)8!sF=20h7+#XemDVjhFJaq7,*4@`"$;8>%Q:5/?H/JaNWd+Z4mM!X)F)hqe/#UH\A[t9uLTXt=R%$;6ESeVk-t)[JrC.ZV@HcMu8>?tj:i/H*YgF;VWuo'!o8nl\d.d>OYhNX55r-&Z+"`*%m'8eSM]@"M$TB8Z<@2I+t]bHT=@2I+tY%9A>%_U2i&T$$B1gaHt&jWCietV[r$Ua7pNBrTSESAA1;u8jOro+I/=UQ+W2NE(FS+Um!'eGnd5GMc;;u10Yukc&p<G87mN#&k::e%--;[@<)-%HD'bJ$P*,X)8rlQ?cm4fkZ4_.TaZ>8pSoh\B1*\380pKs48nK(iZ]['VQdWuMWV!*I'WG%M<@ZBGQ&:jNeOh31AS$7c%o>4D9@p'[])0oo[>d`pW[T(sb3\rCZ5F9Nu95!6qjm/bLqU1d])<l^O'Z*h4@6+oRQ)^3FAk_ALAu%gAF!`]k.T<=5WT;9&ramY!%1R/*3Ppi*H,u&$AVK5YaRB,T=eoVDgO-,@m9IFf%PT%8u/8^rk$WHk&@!YktX<A$ed0$^&0SOJi+V##).<69K5thrX&BAH<ZoGss%+bW7+?3*GWc=8m&_r_%2G,7W/L-`aj2`4`1N@V^oPpt$SOJVO<#=6mRMu]PM?@nj\0!XacfYB3cmLljX9P"Jr=ZDSSDo9k.#D3I#%`*C:BZGgUD8=q=XQgtbd3hUXC[MMJ,c@I2Z6cFVU>XGU=_iZDfP2*qB$]\:NALdt8`$$9CAl,uU#8U%(VMO9T#;0,/*-9"m!JmsR%929-Qq)@[p+XE$"(q'u-?kOIF?mt_I@26t[LjiW*Ss(!'_W9^iH/aGF=ThuK+9\&dJcf-!cK5s=g_:ZD6%GKiEibP>4R$G#.3`pZ%]@CoX?lIg0M'35J+C"F`U'o@V$ZHPd/F/0:@8I3,EOm'p`i_Od@Wb\`JW[nB_J'dXqaP#pI&=e$TI\OV.Ypp-PoDoK?^Qm;#<?P\%-pE^;'X-hCmT/AP03f@DESsB0i3C?a/P%,sW@.lL]!.g[mhsIY:`7W:8kX]nch,<n^l($LPS?WT_Dkt3LVqW17'2.!)/>Heo,*uc%!0K7IOXK3ld8H*HXuBcbaE5t@;?Ed/`$n$#L2dP+A`$Jd56`mqGL^778S?tG5tbI0`^YS:&==XB4H9]?bY;#3Z.G;1/NZXg)Z6Iq%[=m$b1PX4X6Y_nNXc+ml#;s159Um%+#4hhh=PsM1Qdm:3L#U[VhTGPEjAN@0jC3+,+X_)>8ch&bU`H2@MM(T+O!V,,=(fTZkfSUs%#]V#9!9ODXbP93a!@jW0JbEq^D#YI2"&DE]>ci_b(-3icegt5H<nC(`=eR]f0N+X'AgH<M7aad>1IWMMKB:]Y`JQV0`q^6d7o^ai%T`d@>%#KT"L4lYeN!;"*A5sb%",n[[>-pi;M^OrWPRA(Y(e&6l;2JSGkKuqi(C,1E/K"P[f;'C*,`0T`9$F$D;US#c-%U1o8@[#%%N%1RD6kTsL1,un$N"d(H,_.m%%<a/5!bnX54:?UsUYr'O7C=`.+GUYm(8AXlKXU%=cT,!YNCYr</73-\'dpOaINf*;j1)kHWY29"%X!7&'S><csPHCln^#gefZctd$=L6N80K2#M!U#O8M9pia3o:TT3t`&nKr^&f7ZQeT7*TqOO;F!gXJ!P[K;cP`/2g`8I-M\*e'rqW%bmZF@MT18Cq1*Yn4:;Z(*3!$H8QHn=W'c#S89FsZ2ON\Z9SZOKH,p\fMZt>S&j3B/E7TQn9R2Gh4191h$oU$bY4;-YS9F/.e>u,P%;X#:QUqnuX"*];Dk!s0NU(_6,(O:kQ5^pL);[nbM(*%(NGrTESLH<ZOL(l.9K:41m[mic[Li?1ChaeCg4^WS3[L?R:TE.Kf"-CCk%7pn]W_`8t>EYD6!0b?("OsmT'EjSAHkaP2aoVi"kL<c/M[D:9='S.RKV9%;B850EHPdjDFe<J<S$g%F<$'H#G,fi#4p'LA'&3u+@%1<:kreDdj&6*=pZ:6Bp]/Q/[6_-ADnb[Aj%)lHe$G#ghZBu'0<d,<"iP3-cN:rCJ#&;7>hGTZBfi"CHBP._(qH`R2UN\o_f&Y-!/%#LJ[gGG[`k%i-]KJRe2b3j@7BKWFPb)Grll%B<XZM3iiG7*Z0-XZM,;O^p&FRFjgR1j&ns$)k@hEPfhfCfJh07/R9r4XeiWRS-_-%#&)st"7kA0587>>]*iB?2fNF8gD;^RYX><Th+=1b7ntq`g_@GY-sVk3W<X<T\gSp+M,Ok!r'gt1lL8*aNSdWBMe+/fqEF([R_ihg%H+(ddWbSVNFGX/"0MW28a'0ZC%OCk57d(]u;pGp6"ILI3""qNlI,kIjW!t/f&^?$r3FW60.Ula-;nOpla&rLmL\NW&bg(JR6*M[b%S-T_3EJGiZ#)26^>83/_kXfoXVik3QE[/pH."L2e&Yu4B"8;#!#-tmN^u/9A=cs&F^_:A[>(#+@niVk*c3fnA0H\MW&BjPtT[%I%%&8oID2SX_c!J^1s\XhH`!%S)>'_G9jB2"q&@)aPA)bg;V"&p^gV?!2W8d]QPe>CSWg=[pil,V_HI:'i&2hE::7RN_'TuAe'H3R-S%Y^Ef#L5HadnTBjQUD$=36bT(F6a(Gs3Pkm>n_6*4TW/t?n=HV#"@]_<Mf1Xmf#_\F+N<i!$af+'d5>&(k`-Y;WPP,dpl]+j*&IYW%,lp+j[c80pn=gIki2TndYkYQTYp8:m`F#hpi=O6f,jq<s*jWFEN(m"V#iaqh(9cJS<N:R+)mVHXK$*'.Yo/JT1=#g8Rk^_X#^h$,%nZ,&cO@mY2hT$fbl#PS"@jA9Q/IIU;"rLIMP+'AYOtid:FH]2'Z9hXsaKr_9/L&W5J.?t43<CDU!t<?l-%[!,+LaX-SN2M>Bmuf[%WplCK&.cW\1Knl0<@AG?E"PN]-/Cmcr+H6h\eQLhH+K0f@G$_fkNoi(Cl'8P7cN%oE%2)$rk[P[PRnCmGLR6Bl\J`V^0m<iTge/F%?4\;KGg%KhUJ%scSa.4%W4"9,\p.S:b%jo.-(L*sH*RGCRLMd#QB*7i=>oC[)$`Go"DMf\A4pq`",1AT8uTkPeW-HUE8mgq18Ila%1Qq==<0q;;&I_)&*Td":EMJL-<_H2g,EJ7i-;d(;mo8G@S-2Ku#o5.Xkt35hS6oGBp`*fJi[$Jua#>m4R:C6$<Y(u0d`<EJXWG35%KF]LCF(*r</XgGnd@^lq5)IW4.*N9.CgT,S\5Zq2-<7:4LcCD]'lbZ>nT9@?9`jO;,MS9V/n*]G*j-]DYQ`/@S<Af^%-_(Tr!7NQ%8k:jZhCd6p+ohA>Sh"cib1-pH_;u5#=7!mZ_;]3'e\JUsMG42fC+rg&9tl`GVEju-5"'9-pG0\3B22kX+O5\s1t[E=q?3BW?KpOn%fbDU`4s1^s7[Rrk2A#Co.:E<$E4Qm,VB(S/6?!LqKekVe`.IA&S=]sY..BrK/__C=mGt.-[GNf7;PRkV+h>aSSYUFuJk%07d\'<e%5E2J$@ul7$;$CM;2bZ#PEu9iB[ULB4@(t9VcD#AoZkT(1qD"OJmDGjZ7.[k"X,>FA4)TGOW47Drk41\gA1M[Bnj,rB;V#\r,>1?[%:5?Yb-qfcP*L9)UNhQ:l71jeN2%BO+Wkc0%ou$f6g:?WDDHp9<$2P\=cN#kb[TG*;.etAd*5I,a(p\c"0FZo.1Qj-:R1X%#;1p(\%*e%nl,2$7TO[3@\n>RSaX:)*&AZ`@Q`GG/UYo=DCPPWYb8_u-iEf`%S;+D.]1[3.a?cM\fLa*OHnnrPgK5&kj.9?"A@UJBe3.N1S%rkCX2dKW_9A<K6AnZnA(!2dr+3*b"Q`^4]EFtC2_;)H3rG>/];obG,TdaA<&`ehiHN#e'p3"L<ajTZ#DE0UDaUmZ;;:UsHQbX0/3%"mg:2LQNFCQuG+VM4;(f$K\c;)@d\qe8b`na19HM%B3?l*6mDG/-q?q[3)nuV!,E1A1&H`n18VNW;,Ne_4"jjlYFA[lpT0i!j3%p%!uqhiTQhO2g'Q.)7Ypp';Mt8F,!V3'QhMmc:@mF4/t'rW#s]La1bV0@Xi$^RVB<EV*u</Aeuq[pH`>EVoVG8j[Y)T[KMo$o1uCRN%KFAqqed716L4VcnoEps5]Kc4\;/1WuKj6WX(JSpW%.@UKF790e?oVGJr"9q"'l!![qMQKX3U`jG5Zs;7$1CUSpH>9YT%2?TTL>iU%8->XY$5au%YW&@P'VdRKiR0%q5WRs7GrZET[G`HIYL704gLMCt"t0g;nlZ(+'&+-_?W(`E1eD_=!d,2/s0NV1+uob(#.,d7DB0Nr%82(V@\(/C4\?550i3iXEn65"s]n$fHr>*@%7O;i[.!C+nGSL%AI/"sW1Kl\3.nH]RA5Rh#14,@0j;98\U\&=pclq">b/RF".KaC#%8XB:\i(TMG!f:Jo[D5dq7lO#DA8A3*X7&uN@BP7W.F(7hP/H;:pJ/CVd53,D"c&r^R?O(210U-l9>^gm;pe&A5SA>U&oE6HnlU>X%hP7T#pj#LYHmTpJJ-l/@H1f&KOfi7Lhq7k'V78<WC#\K6K]D)&m(/^T+OnXO<tmnq].QBGd@d@58ER:@2nt$d5D;1hG/2i8e4%<[%@(/fa:4;p&c&oY-K(s3e*?rCm'FEK^]'s\b7_"9A4mVaCih2(c!P^=M"V!B)j><T>W$&(en?^b7eAX]niD<k#:g-A%Aeo"=hR\C9%hoW-gE3^A_8`"tL6[.WX!j[[(Wi2ChLnhN<&k'+\M*u1pS&81^3dR9JJ(fk$_>[*.dBalD*EH!dY^P*a,1G_iCe*\FgQRDeM(/+W%BFKQ-<f%iV0mj8+RI[oT\\f[hS6V-5Ar-#T;[rb1SSWcC;pjrXB(!g(YTXpLI^to1GaA%iqT@##_?7^9(_$`kZh9P;DDR=TR:khV%30\lIKF4_gqk#6qaY9C750r2@!oB#U]+%R/*IXP:9'(h$VK0oRiIbhjI+/8>d0!R,[QXqM6bmkb62fYM\7T5/gTWGG?<Wh)HTIWX%8UFY#6%.QS[nUcC^1dPP]4Su7R7c0+3+<4M1c%s\,f6R%f&S):XP)%6"B2u'QgjilVrr6r?R+(;"Zfn6Z3QQF;.mJ$':=<e[4C\Z%!aN9^)eMGI@sg1%J@Kk@RC%aZLg\BK+n[?i0mmA!YQ11HF1D[:$jZ6(RtN&53JB;8KG'$lHOd#_*nBLPoaQ*!Z"AI:FV9II`E7Bj%&.b)bM5dL8R&/Rc`-[cm\lCYF%8;TdCZ#mXa<b.88#B]VA.DFWS^"jC)1o1NE&m6m)Pc@1em%R7YX$S#1!qs",*QT+BMf9:DKTcE%3<9Z8bO1_?e7+0;2\c&'4Rd[c,9k2nc*=b\>;)AGm.2,:!1<&+@QM7pUZui1nC`Je[$laa')4#l@16,/,"RZIk'Y4n0j4)r%`TJ[%&ce/fckO;-[`]u$LPei0?d+i8Qm7P7@An^/`HV,3.d&F4UF#)AmSRul;3^K:g[.B0Y#U<?eWO\_k8I@3'C!)/hlbMF4&O.Y?04FM%meP;2c99=u[@1L*DHNYbG+q1oW)32\@!3`6p)nt<LnqF6C6(\sO$[ZB<8418gS<>(.gFVh`B>]nSZ'gs$I^lTF_C8g-R*ep:>VD+%?7WR1,0P2)h:Llf2%"j].Y3SB@&#T(-:dj(=SSh/f]jNtN`T<4-AoL>h_`AD6Yo=;Ep8Plk/X[fF>)f]!\7Ngg9K@a\fcjV[b`qK%X'PM@,R'pY]FgD5&QN7;1oG9o/5[YqedZ*VM1$+$*P2+oL]0KP0M6j;>h63004f7A"`BWG>`-M>gR]E;d:UFJ^7=TVmG?`:KdZb/%];M7g]P%-5iuWZXe$nL+HY/e</FE8^*`;;bp?A8D2D3\4@Ji9(:##H\MjEK*,m%n482a#+k^Zadb`0JQ^$1&*LfE2CZ"7M2!qQAK%5ZMFe2_)'D\Wjqe.q,H_&!4$/Z&%9Wm4SN,lFZgnf`a2XLj5+G%PFW#XnkC+N1V?1=_tKi+r51&NBs;'+[p%!i5ZjJBBE(:OjCm6%Z6;#*"70GA[u[sYNuC.sb-NTk.&^1cKslt.QuRgJOk$[AZtF&uQ2#>egH$h:YKA;"gE/J1AMqd"o;-SS>F2j>'[OG6`oB2Q93^lX%`5=`\KH#.2d@kH+m`$bqh"Jaqs7XkNrU],]K%`dYR=Y5QHCV^53W;F5G5Fj)qp'p9MgE`jXdR2cRN3?AGDj2X:QOS$BFBIZpRp;p%:oQQc$RS<8FN`]!/\%dNI2EPgFeWPbX@Q>3;OZRUV7tHqV3@L12e\[#n"$psqp`!s!B[74K_>(o>k?4_;Q^BpKJ!)<qRtaOi8&fs%)u;l&ot!7$oYSR$hpFbZWnik_BWT*098Yj.>VqWK[=NPp]tHda3XBqodo^P(<B?(q?2%**)Ynr?>^c#9Or\$S)0!4\^jbI_qhjKp%KHCulG22duG`+uri`%p<Ph1eV/tS<mn&>:LI:P7qoUGbZffZ;u]A3qIXuX:VP6tM#+`51J%WW[T$9iG&@56>fkZi[%P_.BoWCGh4%hVKZM5O>WpaG%M>N]C5H6NI9,1S#do3^9#uPF99s(AQ)U\I8fep$o/`3*.k?>dudt3qTPa-G\gpJ269V7KpgED+2@u/#WJU<BWDd%8s0IgN]kH#i?Bk^+UHjp./2^"(aEgo9M/mFS)kD5NI>^Za0a)4>\<]]U/Z9NrV41iElhlnr1Vd\j>T#`i:H'K?9GJA>PkKViZ>57%1IJB$(*CfC1Rn![12X/Ff#I[^Z7h2$N.A=N?!Q:rRXVM;+_Bol3B0CJnANFV2R&gkjNJh\rXr5tD@1irQ^#eWDRQA$lA`XN*9&]'%I$Wbi@<r23<gc",Z&6RI;<no6_=bb_'&\sb<sMj*d!**LpKlpoM]uRAKq%&P7s[u\DO$tp$?;9]7&MRdJ_-=83g2]ZJMngT65_`>%eCDOE2U,qBYs]eCoB6f`A4m';:lZJ9RS*%I=s16?-=r*]=2s9hN)@$t\(&<1;7GRW&*\4iU8'uF*iso0]HPg0VQ^/EK3Cl<o?NO-%-DaO<S&]J(`_,F0",8[k0g[VtZ?DOUS#%QHOq-MoORL,_UN^7Q8C-&PP@>l<N3,&[]X9'X^*OEK7m4]m5kY=DCu%iT*09ZIQCV;o%+8rhr0bZ!0/V@gW'j2ktqg2DbX=^n)Ugdc-k5bAd%(Kj"F1S?FBTAQ_s0`FaeTGc/iC>aObs%5tA_B;:8B."A4C/eVP19`]%D'Q-%859mk#[!`9j(&%"#*j3Q_l$5/5fq2)(ah%$[p(h+MDc4A!sU5'@]lj%[f/G5@gBf&[i'\a1+]h%NqW=PloK*Bo4YhC_JVS0SOQ4X%.M"9g-91d.p$8O!k"T"pYU/3'QMiBI\^>ug7hT_aot/LsM;k&;?45[np./ZSW\[bQG^p1C$3>P"JO8.,F:gG=e8`X]-<I9Qb$DpW%E)5rl$?-sK)g$c,-iK(VNuE8J^7q<88ZPF,c.2aZd&nO*_kP^:eb]cJVVpBQMJCW$K..U=G.S)3`C<128P'6g\BRaA/A61i4iG,A%f\k!)&MF2b5^!KZO]la@,W__Il_F>s?Y?k*2sCcj>Au*NNEYTEQ7b(,[!=@gl>.R#OojR%Ar%m+Ji&"XdD@(0g;G`U=B[S"H>6(k%!f5iqb'`m`Qpmf>&[a_Bo)XXukjof^ba3't^8CL&7mPC=]@kqsbRXea-0R[\^(`%N!ecfp-fMm,iU&IS3V)(($X4&.R^8t=#N/#)%)PrToHAdI',VB:$mZJot3.'0aG_@1T`<>oDeh^V!W/#>m$KVX5XkoI"+e%_G\FJn9XqD*NiA0X#V`55X,KN_6;!d^;/>nACP'7IY%a0n'u*UZ9Sq(+KN=L]UoFso:7F_E(0<he4t]BRZah%rIWqpDjPHkdQ7LO;d42g%D$#,oTL5\*;$&dSpbPoLC2D7eXYM!I#LA6Hf6%9:U\k&Ad0o`[2]>C6X]/PNgG'-;tI2F]1[kel;j[GTMp&0[:_F158=T^Y=hClBJo+SC<p]&Wh7JK1AO>Ul9j-SFlsD&8riOLH!Wt%[_qOAG9ZHQFBfSgZH*mJ>itWC%%l,m/!eYP>[8k28lq(I6"\%E9*G^Lg%$^]VNN7\9V4'###QC4b8pQnltGet8OB059<;aI1Gj`'%RWW=jrHr<LVA[#>dEU"H06kp%VPDC4S.&ITU^psa1+eP#pGfADe:1ZCUR"r[a=D*[^r:i[@2&-!W:K"cZ2T%O\h<q$h/ZZUi[P>'%ZKi,Ned@,unJCW4W1)-e?L[^N?QKTnS5`d..^M6<DJ;_T[+/M)b/9`KOD0Tr1f\5C8i<5#+.`;?'pX$@BhSXo,S!UU<0m>Bm%+TU%pD'/J"0<Q+R]QmM3'/miUU.D@-qg4:">;DJfoo9=ieo=CSG,Vg,PeKQ7n876oIJstRe2/!6b$jH)4FM5\_iXA%TOFed+eZmL!gU<%-GH<:aFX""Z0/^Z4&hF[,Sq40+tkE_4<)hhM6DT[ZJ?*1+tC4.SO9r(:pE;*F2/-HOP^em.n(qGA4_RoXN&VtNWl6\LhO!3fi>o>%b$rlnD1V]1'e43Ml\+%dC6@r7buDaERj;$X'4cEN=^4!(=YO?CcU<gk;0nZ0XM<3.qb."'=Me??5m*s.j\TatS0/NNB^gf!Vi^ZF%K&HMG/KVI)OI$cfYGI.mYV?I.pOT^%d_hZECI=>_==aJ=PA;O>TK<#c/M.!BbIk#mA9V*Z@!"%jE:9Pcqd()3G`'!TcVdJ)$)AD7%W#>edbISr%TMu2`pb0ejUHuAf#4a0g9`iA(qIro#Ee4DdQ5obMlPP-j>fTD[,Hd\'oC@Dhi84XP=tKr!(VpQPU\&kPoa7P[Zi=@f%RiH=h^ASYqAAH,2kp9Y=egY64r;Zm<P?\]b\USmeOCC.b/K>;W0H^<qQ1t6;U%Vs(T-hBEe:7EPXR7WNZKa%E)fPrrI8QBL&j+"&%?h=B$X3&?<MnEU4:Rq]Q?4Ko`S*rLD,QqBqVQ,4T@KhI/1a$/$FdF>7o)u@jYJ)KGXrI!M0nSmq+k`soZg-*$eCH[35nDNU#s3)(%!oYAJq_biKOdLT9f[<W$$NsqO.&m@[rZ8D(:bT`A+2>iFeDg*`&ftZ6mY8A!A=Hkp@pn`uZTC"L5m6u]HAcZ;O1PP<6OCA=Nid`=%4b.0?OnloOS4Z2#Ui!AcPFJ\e>F.,U@@5BH/>`t>_ts+(+[CO1]1ph+6"#g^L'Z<5,Yq1f2#2[#q3cA9Ag/Q;oT;.cHs<jp\$?AM%SXbdI6Zi`q5;e:-5PZ^/mSD@2Z1b*e?DbVE)JgU6ieVR/;qt](6!f;@WH<@<gZ)fV2H/A]'h(EEH(=V.#J<#ZV38$(dl`?0P+'B'%,:C]BdSC5]E_s=[1,o)ifn_VIa&#[a'VQT-$T>X>/@Q>LQD>i1OX[5D&thZQV]5':'3H9`(WRio&s@6glH^_5IJ`4$RarF*5S$`C%5R#hn,U^uiAsnAmMRRb"j?BW.A[Xd]S3rNuk7CB)HP5LYR.%DfJ`[CBm8JFNG)flHOti2I$+2g(U'l?,Vo<aF=n+m!FD0t3>[Lp<%ZbMQ[6t>#H:^+#S3/!MUX6QBC28bC*;X)4"pRc`\4G;^_E1cK.A&(:=AF.!^Dj"8\0NpZ7=VT:n5[c7/cmAOh0<mTL/(]g,n]o)U%.V_=k:/hH:OBIt^A#e0a]\esrT"G;A+JJ6YjBA#oSS#0s5!32@DEa)uackId5C(#@%o#81#3'0pg@79Cn]+f.1g?L*FQj3rejoR1%e'\\#"tNBNW8q>,@55RjodU`aV(XifP>U*BRL"J5Kt]EKZM>YUBLk>J&''BgQ2AoTj@RdJ'!j[jH!EGT8!Gj"BUPtk`/eec&'OZ)%dr<7Cl5n]QKTi^#eCEiBNttL7AioFM.lth%\&Fo\gA8MWBO@rdc!d6gg)"%-5gTer0KF5#H2m8ep3dS9dF@Ukj#gO=G6<m_"35(1%?`Dg$^,^tZ89fq2JIJbPJgV-:?r#0V!%Etp+f,^,(ID)i-Zak3_Kl/C*-*A`"kGtT7`AS`AM-YQ:\(O#irR&t,+Qpm#`_1T[5`c6%I=(jbrK,>LQPe:K7R1)U*64PE$n'6qhUSkBO)#P^S5&PCmnhMIOe([P$*Ge1e6>?uX3q3L>]C6\aG-bt9>g:ak?V!,@`s_ID9u"9%A<)CDVX&eTMS=LG;-Ieq5_h\\:,7Kl`P2MQ8^J7=)(P3GP:^4W/ZlTH`29r#T-9.oaB8R:jQIo_NHK^al"n^[h_-(nH;>;^^@`g9%4nHN^.gY498ir0Jir`R``.8RYLJN/rC2%Nt;EMJ*T+1X^.R+[ia0C*R(b84t]s?9_9&RL$N;PdFa7E.TL,=e<AHnJ5*(5J)_;iH=%UH?Y)m6Ia^dsb6F^r6+R`u\K*'X*%"RE-7_C/$WV(@RkD#YQJ%JX%P)h^JTDK"n)T9eI36=X(g/\9?<j?el?pSQHJ.AOMEO&BSDR%qMC.I"^-]D_bB%K<2VNr2,aZp>!bo@$'@27]Gs;7U1a!8[:TK_8hMFB8*.*gpQu2aHsl\!,tM0mpo\Bc=MnrtUPk:,S[""7W7$/L%nGt#C>XtXSW5LW06dAR*O1!F_-GGD<1OThnQHdmhOht1B8.q-P.K\dG3B8FfQc.'T/k0,:X3lm3;AW@+E1pA[WHSW`JgR7>k"(,I%<')ne6qX$TO+R:Xkom*pU,T:#O<OgoS<iT;3)t@'8VJ4bk]?dceA?"NAZCpnY00)_B\ER^Or]N;!S78im?eqG5@D]GkY*udP?G2T%EJg(4_kT5::rr<5:L,P_/[ea;.PbtWQ+N-kBZ*o*6UIp.V()V*])SH5[j,Qkk<2p)Fr4V(Q=DLbKt!\/j":ch?jW639iPNkS,b%n%9&+Q*M34`(6f;+V/YX#]8OGmWl5:)+'=_c-WsCr4p6lIT'Zt)A=ORL+'<KJY6600A1#bo^'+#FT@b@\KV,ifc-!/&T`k3kS>tam"%*GhHt?+dHGb,t*sg*N5-%j.uUk7D)K_0/#4a4ia;'PeR[9cNN=lnDk\FQD&\5PZ>#\1Z`l*'ul%i^NY).((c,C90BX9:K%-?C?M`%/CX922%Vg%UOdb#\uC]4>+6[cm3DI9'MbtZO58BboIr&FfJO1WI_1$?P9)QoHlRm)O_R@l)=M`DRX&[][[I%h"G@9T>oiF-K-Q.5%n1FN9gu4q:;W"JU3mb8,4<;\eZpIt2)3h#'OTP&]m1)l'4<geNZ/GsrYrII_"`XlKV"qMr$usQ2>f[Ml^<0?MHe(uP6X7"f3e-HD%Z7cp`0oaoj@30t*mBJTn.'kmWOQ6kj49f5)VLUWW;mBK()7sIsZJer>D@_<.Fi+aS+R?@$rX1G,CE!MGl**:#jS1Vo-Fmq\Y4V4c%p_K/f$"RUlULYB7AYYqkW[nN)G8EkU0%CC<U!IrP<fe0X=rFg6MR#]j."*_An&]D<,J\?ebhf3RTORqMo<&FR'B!2_]4&eo.(#M,%Jt4j)iBq:_FKU"L1ur1319Bc1'W`Y!.AL3kI8=s4Mm-u>>]sL%#P"mK46A80^=Q_\".73.:@[=jhugbmd6pro%EEU>8`KhlBSP(A%=0nJO05(M3"/0iG#SUO59%i;5ES_K2!HB%T6&ourneOhoTh0Wd-$</&F.k?7%V$m?![hEsh,M!sp-*Tm2="LU[E+n9H4_^[Zae8G%c_o0J?A]dR;hL>?m7nYdAGLi:X3B;,cp.Ga,1:WLcr(6^:n!VS]d<&KK4)JeT'7%ZZkoE]%Z76SEb0dUd*'/YGBW2RWmR3ZE=DMP%,tW0S$]hICIJ?Z'X`tG9kQk'bmhFea+tt'uj,YD7;I<K35r#Y_)>2L0hfa5^obUtbpA+THs7k`GO)NmgI<tqbp$^M0meYUThgW6;%iq$7?rr)N_pYS3;s)NP`QT*g:])M6_+(#!<qKM6oe).\!krW8D&*n^8P/^q;nY*rp<L6XcSnmsT(/)?dW;U]AYgV)IO.!Ihjuk2G%:*+U:Bl$Roopbt_cfb=TcdrnT7;^t`T/@$a]t1:Xgb5j<rS-Fl?XI,ernHu/hn4C1`RE/:hqr>LS\P0slgN]CIJNlu%j*DgIX(hj%ebXaHchN:)mqD[Ue,-n/\Gl0g]:[qdhnJu4rU9EiT<J9Cp!`$C$S&Gh?IIC(qo,2A>bC]Jj813Mph.n#YPt2=npKYlrd"H,s1p.3%rTQ@JIs:k?T=aD>T(aN`Vh@_jbD/3`%:aTqpu:k"[7QObdO^;le,Z,H?Lt@e&q0c,cg7"dmZH8]gCnof`J4]\1n?j,T)ARIJtdHb%b6mNN&*)!Nq5e(M'k+fAD-#Wg]sI_8]W_54qk*2DD`tSq>^L'i]_MHSGH_&Aroq]%YMW^$qsa6MYHL`?fD0gjq"fd=?`r;"J,S?d%]D&M4+9(j!-X,)*lK'[*r8qAcl12T.rMcg~>%AI9_PrivateDataEnd